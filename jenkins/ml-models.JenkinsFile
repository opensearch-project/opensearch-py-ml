lib = library(identifier: 'jenkins@2.0.0', retriever: modernSCM([
    $class: 'GitSCMSource',
    remote: 'https://github.com/opensearch-project/opensearch-build-libraries.git',
]))

pipeline {
    agent
    {
        docker {
            label 'Jenkins-Agent-AL2023-X64-C54xlarge-Docker-Host'
            image 'opensearchstaging/ci-runner:release-centos7-clients-v4'
            registryUrl 'https://public.ecr.aws/'
            alwaysPull true
        }
    }
    options {
        timeout(time: 1, unit: 'HOURS')
    }
    parameters {
        string(
            name: 'BASE_DOWNLOAD_PATH',
            description: 'S3 base path to download artifacts from eg:ml-models/huggingface/sentence-transformers/all-distilroberta-v1. DO NOT include the trailing backlash at the end',
            trim: true
        )
        string(
            name: 'VERSION',
            description: 'Version number of the model',
            trim: true
        )
        choice(
            name: 'FORMAT',
            description: 'Tracing format of the model',
            /* The first choice will be the default choice, and we need it to be empty string
               so that we can update model listing without specifying 'FORMAT' in JENKINS_PARAM. */
            choices: ['', 'BOTH', 'TORCH_SCRIPT', 'ONNX'] // We set empty string to be the f
        )
    }
    triggers {
        GenericTrigger(
            genericVariables: [
                [key: 'BASE_DOWNLOAD_PATH', value: '$.BASE_DOWNLOAD_PATH'],
                [key: 'VERSION', value: '$.VERSION'],
                [key: 'FORMAT', value: '$.FORMAT']
            ],
            tokenCredentialId: 'jenkins-ml-models-webhook-token',
            causeString: 'Triggered by GitHub Actions Workflow',
            printContributedVariables: true,
            printPostContent: true
        )
    }
    environment {
        ARTIFACT_PATH = "${env.BASE_DOWNLOAD_PATH == "ml-models/model_listing" ? "${env.BASE_DOWNLOAD_PATH}" : "${env.BASE_DOWNLOAD_PATH}/${env.VERSION}"}"
        UPLOAD_PATH = "models/ml-models"
        BUCKET_NAME = credentials('ml-models-bucket-name')
    }
    stages{
        stage('Parameters Check') {
            steps {
                script {
                    echo "BASE_DOWNLOAD_PATH: ${env.BASE_DOWNLOAD_PATH}"
                    echo "VERSION: ${env.VERSION}"
                    echo "FORMAT: ${env.FORMAT}"
                    echo "ARTIFACT_PATH: ${env.ARTIFACT_PATH}"
                    echo "UPLOAD_PATH: ${env.UPLOAD_PATH}"
                    if (env.BASE_DOWNLOAD_PATH == "ml-models/model_listing") {
                        echo "Proceeding to download the ml-models/model_listing."
                    } else if (env.BASE_DOWNLOAD_PATH.isEmpty()) {
                        currentBuild.result = 'ABORTED'
                        error('BASE_DOWNLOAD_PATH cannot be empty! Please provide the correct values.')
                    } else if (env.VERSION.isEmpty()) {
                        currentBuild.result = 'ABORTED'
                        error('VERSION cannot be empty! Please provide the correct values.')
                    } else if (env.FORMAT.isEmpty()) {
                        currentBuild.result = 'ABORTED'
                        error('FORMAT cannot be empty! Please provide the correct values.')
                    } else {
                        echo "Proceeding to download the ml-models."
                    }
                    if(env.BASE_DOWNLOAD_PATH.endsWith('/')) {
                        currentBuild.result = 'ABORTED'
                        error('"/" not allowed at the end of the BASE_DOWNLOAD_PATH') 
                    }
                }
            }
        }
        stage('Download the artifacts') {
            steps {
                script {
                    if (env.BASE_DOWNLOAD_PATH == "ml-models/model_listing") {
                        downloadFromS3(
                            assumedRoleName: 'get_models',
                            roleAccountNumberCred: 'ml-models-aws-account-number',
                            downloadPath: "${env.ARTIFACT_PATH}/",
                            bucketName: "${env.BUCKET_NAME}",
                            localPath: "${env.WORKSPACE}/artifacts",
                            force: true,
                            region: 'us-west-2'
                        )
                    } else {
                        if (env.FORMAT == "TORCH_SCRIPT") {
                            downloadFromS3(
                                assumedRoleName: 'get_models',
                                roleAccountNumberCred: 'ml-models-aws-account-number',
                                downloadPath: "${env.ARTIFACT_PATH}/torch_script/",
                                bucketName: "${env.BUCKET_NAME}",
                                localPath: "${env.WORKSPACE}/artifacts",
                                force: true,
                                region: 'us-west-2'
                            )
                        } else if (env.FORMAT == "ONNX") {
                            downloadFromS3(
                                assumedRoleName: 'get_models',
                                roleAccountNumberCred: 'ml-models-aws-account-number',
                                downloadPath: "${env.ARTIFACT_PATH}/onnx/",
                                bucketName: "${env.BUCKET_NAME}",
                                localPath: "${env.WORKSPACE}/artifacts",
                                force: true,
                                region: 'us-west-2'
                            )
                        } else if (env.FORMAT == "BOTH") {
                            downloadFromS3(
                                assumedRoleName: 'get_models',
                                roleAccountNumberCred: 'ml-models-aws-account-number',
                                downloadPath: "${env.ARTIFACT_PATH}/",
                                bucketName: "${env.BUCKET_NAME}",
                                localPath: "${env.WORKSPACE}/artifacts",
                                force: true,
                                region: 'us-west-2'
                            )
                        }
                    }
                }
            }
        }
        stage('Sign and Release the artifacts') {
            steps {
                script {
                    publishToArtifactsProdBucket(
                        assumedRoleName: 'ml-models-artifacts-upload-role',
                        source: "${env.WORKSPACE}/artifacts/ml-models",
                        destination: "${env.UPLOAD_PATH}",
                        signingPlatform: 'linux',
                        sigType: '.sig',
                        sigOverwrite: true
                    )
                }
            }
        }
    }
    post {
        always {
            script {
                postCleanup()
            }
        }
    }
}
