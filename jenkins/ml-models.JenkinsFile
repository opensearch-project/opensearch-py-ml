pipeline {
    agent any
    options {
        timeout(time: 1, unit: 'HOURS')
    }
    parameters {
        string(
            name: 'BASE_DOWNLOAD_PATH',
            description: 'S3 base path to download artifacts from eg:ml-models/huggingface/sentence-transformers/all-distilroberta-v1. DO NOT include the trailing backlash at the end',
            trim: true
        )
        string(
            name: 'VERSION',
            description: 'Version number of the model',
            trim: true
        )
        choice(
            name: 'FORMAT',
            description: 'Tracing format of the model',
            choices: ['', 'BOTH', 'TORCH_SCRIPT', 'ONNX']
        )
    }
    triggers {
        GenericTrigger(
            genericVariables: [
                [key: 'BASE_DOWNLOAD_PATH', value: '$.BASE_DOWNLOAD_PATH'],
                [key: 'VERSION', value: '$.VERSION'],
                [key: 'FORMAT', value: '$.FORMAT']
            ],
            token: 'JENKINS_ML_MODELS_RELEASE_GENERIC_WEBHOOK_TOKEN',
            causeString: 'Triggered by GitHub Actions Workflow',
            printContributedVariables: true,
            printPostContent: true
        )
    }
    environment {
        ARTIFACT_PATH = "${env.BASE_DOWNLOAD_PATH == "ml-models/model_listing" ? "${env.BASE_DOWNLOAD_PATH}" : "${env.BASE_DOWNLOAD_PATH}/${env.VERSION}"}"
        UPLOAD_PATH = "models/ml-models"
    }
    stages{
        stage('Parameters Check') {
            steps {
                script {
                    echo "BASE_DOWNLOAD_PATH: ${env.BASE_DOWNLOAD_PATH}"
                    echo "VERSION: ${env.VERSION}"
                    echo "FORMAT: ${env.FORMAT}"
                    echo "ARTIFACT_PATH: ${env.ARTIFACT_PATH}"
                    echo "UPLOAD_PATH: ${env.UPLOAD_PATH}"
                    if (env.BASE_DOWNLOAD_PATH == "ml-models/model_listing") {
                        echo "Proceeding to download the ml-models/model_listing."
                    } else if (env.BASE_DOWNLOAD_PATH.isEmpty()) {
                        currentBuild.result = 'ABORTED'
                        error('BASE_DOWNLOAD_PATH cannot be empty! Please provide the correct values.')
                    } else if (env.VERSION.isEmpty()) {
                        currentBuild.result = 'ABORTED'
                        error('VERSION cannot be empty! Please provide the correct values.')
                    } else if (env.FORMAT.isEmpty()) {
                        currentBuild.result = 'ABORTED'
                        error('FORMAT cannot be empty! Please provide the correct values.')
                    } else {
                        echo "Proceeding to download the ml-models."
                    }
                    if(env.BASE_DOWNLOAD_PATH.endsWith('/')) {
                        currentBuild.result = 'ABORTED'
                        error('"/" not allowed at the end of the BASE_DOWNLOAD_PATH') 
                    }
                }
            }
        }
        stage('Download the artifacts') {
            steps {
                script {
                    local_path = "${env.WORKSPACE}/artifacts"
                    if (env.BASE_DOWNLOAD_PATH == "ml-models/model_listing") {
                        download_path = "${env.ARTIFACT_PATH}/"
                        withCredentials([
                            string(credentialsId: "ml_team_bucket_role", variable: "TEAM_BUCKET_ROLE"),
                            string(credentialsId: "ml_team_bucket_cred", variable: "TEAM_BUCKET_CRED"),
                            string(credentialsId: "ml_team_bucket_name", variable: "TEAM_BUCKET_NAME")
                        ]) {
                            withAWS(role: "$TEAM_BUCKET_ROLE", roleAccount: "$TEAM_BUCKET_CRED", duration: 900, roleSessionName: "model-releasing", region: "us-west-2") {
                                s3Download(file: "$local_path", bucket: "$TEAM_BUCKET_NAME", path: "$download_path", force: true)
                            }
                        }    
                    } else {
                        if (env.FORMAT == "TORCH_SCRIPT") {
                            download_path = "${env.ARTIFACT_PATH}/torch_script/"
                            withCredentials([
                                string(credentialsId: "ml_team_bucket_role", variable: "TEAM_BUCKET_ROLE"),
                                string(credentialsId: "ml_team_bucket_cred", variable: "TEAM_BUCKET_CRED"),
                                string(credentialsId: "ml_team_bucket_name", variable: "TEAM_BUCKET_NAME")
                            ]) {
                                withAWS(role: "$TEAM_BUCKET_ROLE", roleAccount: "$TEAM_BUCKET_CRED", duration: 900, roleSessionName: "model-releasing", region: "us-west-2") {
                                    s3Download(file: "$local_path", bucket: "$TEAM_BUCKET_NAME", path: "$download_path", force: true)
                                }
                            }    
                        } else if (env.FORMAT == "ONNX") {
                            download_path = "${env.ARTIFACT_PATH}/onnx/"
                            withCredentials([
                                string(credentialsId: "ml_team_bucket_role", variable: "TEAM_BUCKET_ROLE"),
                                string(credentialsId: "ml_team_bucket_cred", variable: "TEAM_BUCKET_CRED"),
                                string(credentialsId: "ml_team_bucket_name", variable: "TEAM_BUCKET_NAME")
                            ]) {
                                withAWS(role: "$TEAM_BUCKET_ROLE", roleAccount: "$TEAM_BUCKET_CRED", duration: 900, roleSessionName: "model-releasing", region: "us-west-2") {
                                    s3Download(file: "$local_path", bucket: "$TEAM_BUCKET_NAME", path: "$download_path", force: true)
                                }
                            }        
                        } else { 
                            // env.FORMAT == "BOTH"
                            download_path = "${env.ARTIFACT_PATH}/"
                            withCredentials([
                                string(credentialsId: "ml_team_bucket_role", variable: "TEAM_BUCKET_ROLE"),
                                string(credentialsId: "ml_team_bucket_cred", variable: "TEAM_BUCKET_CRED"),
                                string(credentialsId: "ml_team_bucket_name", variable: "TEAM_BUCKET_NAME")
                            ]) {
                                withAWS(role: "$TEAM_BUCKET_ROLE", roleAccount: "$TEAM_BUCKET_CRED", duration: 900, roleSessionName: "model-releasing", region: "us-west-2") {
                                    s3Download(file: "$local_path", bucket: "$TEAM_BUCKET_NAME", path: "$download_path", force: true)
                                }
                            }        
                        }
                    }
                }
            }
        }
        stage('Sign and Release the artifacts') {
            steps {
                script {
                    source = "${env.WORKSPACE}/artifacts/ml-models"
                    destination = "${env.UPLOAD_PATH}"
                    withCredentials([
                        string(credentialsId: "ml_release_bucket_role", variable: "RELEASE_BUCKET_ROLE"),
                        string(credentialsId: "ml_release_bucket_cred", variable: "RELEASE_BUCKET_CRED"),
                        string(credentialsId: "ml_release_bucket_name", variable: "RELEASE_BUCKET_NAME")
                    ]) {
                        withAWS(role: "$RELEASE_BUCKET_ROLE", roleAccount: "$RELEASE_BUCKET_CRED", duration: 900, roleSessionName: "model-releasing", region: "us-east-1") {
                            s3Upload(file: "$source", bucket: "$RELEASE_BUCKET_NAME", path: "$destination")
                        }
                    }   
                }
            }
        }
    }
    post {
        always {
            script {
                cleanWs(disableDeferredWipeout: true, deleteDirs: true)
                }
            }
        }
    }
