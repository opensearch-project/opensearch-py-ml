Search.setIndex({"docnames": ["examples/demo_deploy_cliptextmodel", "examples/demo_metrics_correlation", "examples/demo_ml_commons_integration", "examples/demo_notebook", "examples/demo_tracing_model_torchscript_onnx", "examples/demo_transformer_model_train_save_upload_to_openSearch", "examples/index", "examples/online_retail_analysis", "index", "reference/api/DataFrame", "reference/api/DataFrame.agg", "reference/api/DataFrame.aggregate", "reference/api/DataFrame.columns", "reference/api/DataFrame.count", "reference/api/DataFrame.describe", "reference/api/DataFrame.drop", "reference/api/DataFrame.dtypes", "reference/api/DataFrame.empty", "reference/api/DataFrame.filter", "reference/api/DataFrame.get", "reference/api/DataFrame.groupby", "reference/api/DataFrame.head", "reference/api/DataFrame.hist", "reference/api/DataFrame.idxmax", "reference/api/DataFrame.idxmin", "reference/api/DataFrame.index", "reference/api/DataFrame.info", "reference/api/DataFrame.iterrows", "reference/api/DataFrame.itertuples", "reference/api/DataFrame.keys", "reference/api/DataFrame.mad", "reference/api/DataFrame.max", "reference/api/DataFrame.mean", "reference/api/DataFrame.median", "reference/api/DataFrame.min", "reference/api/DataFrame.mode", "reference/api/DataFrame.ndim", "reference/api/DataFrame.nunique", "reference/api/DataFrame.os_dtypes", "reference/api/DataFrame.os_info", "reference/api/DataFrame.os_match", "reference/api/DataFrame.os_query", "reference/api/DataFrame.quantile", "reference/api/DataFrame.query", "reference/api/DataFrame.sample", "reference/api/DataFrame.select_dtypes", "reference/api/DataFrame.shape", "reference/api/DataFrame.size", "reference/api/DataFrame.std", "reference/api/DataFrame.sum", "reference/api/DataFrame.tail", "reference/api/DataFrame.to_csv", "reference/api/DataFrame.to_html", "reference/api/DataFrame.to_numpy", "reference/api/DataFrame.to_pandas", "reference/api/DataFrame.to_string", "reference/api/DataFrame.values", "reference/api/DataFrame.var", "reference/api/Index", "reference/api/Series", "reference/api/Series.add", "reference/api/Series.describe", "reference/api/Series.div", "reference/api/Series.divide", "reference/api/Series.dtype", "reference/api/Series.dtypes", "reference/api/Series.empty", "reference/api/Series.filter", "reference/api/Series.floordiv", "reference/api/Series.head", "reference/api/Series.hist", "reference/api/Series.index", "reference/api/Series.isin", "reference/api/Series.isna", "reference/api/Series.isnull", "reference/api/Series.mad", "reference/api/Series.max", "reference/api/Series.mean", "reference/api/Series.median", "reference/api/Series.min", "reference/api/Series.mod", "reference/api/Series.mode", "reference/api/Series.mul", "reference/api/Series.multiply", "reference/api/Series.name", "reference/api/Series.ndim", "reference/api/Series.notna", "reference/api/Series.notnull", "reference/api/Series.nunique", "reference/api/Series.os_dtype", "reference/api/Series.os_dtypes", "reference/api/Series.os_info", "reference/api/Series.os_match", "reference/api/Series.pow", "reference/api/Series.quantile", "reference/api/Series.radd", "reference/api/Series.rdiv", "reference/api/Series.rdivide", "reference/api/Series.rename", "reference/api/Series.rfloordiv", "reference/api/Series.rmod", "reference/api/Series.rmul", "reference/api/Series.rmultiply", "reference/api/Series.rpow", "reference/api/Series.rsub", "reference/api/Series.rsubtract", "reference/api/Series.rtruediv", "reference/api/Series.sample", "reference/api/Series.shape", "reference/api/Series.size", "reference/api/Series.std", "reference/api/Series.sub", "reference/api/Series.subtract", "reference/api/Series.sum", "reference/api/Series.tail", "reference/api/Series.to_numpy", "reference/api/Series.to_pandas", "reference/api/Series.to_string", "reference/api/Series.truediv", "reference/api/Series.unique", "reference/api/Series.value_counts", "reference/api/Series.var", "reference/api/csv_to_opensearch", "reference/api/groupby.DataFrameGroupBy", "reference/api/groupby.DataFrameGroupBy.agg", "reference/api/groupby.DataFrameGroupBy.aggregate", "reference/api/groupby.DataFrameGroupBy.count", "reference/api/groupby.DataFrameGroupBy.mad", "reference/api/groupby.DataFrameGroupBy.max", "reference/api/groupby.DataFrameGroupBy.mean", "reference/api/groupby.DataFrameGroupBy.median", "reference/api/groupby.DataFrameGroupBy.min", "reference/api/groupby.DataFrameGroupBy.nunique", "reference/api/groupby.DataFrameGroupBy.quantile", "reference/api/groupby.DataFrameGroupBy.std", "reference/api/groupby.DataFrameGroupBy.sum", "reference/api/groupby.DataFrameGroupBy.var", "reference/api/groupby.GroupBy", "reference/api/ml_commons_delete_model_api", "reference/api/ml_commons_delete_task_api", "reference/api/ml_commons_deploy_api", "reference/api/ml_commons_execute_api", "reference/api/ml_commons_generate_embedding_api", "reference/api/ml_commons_get_model_info_api", "reference/api/ml_commons_get_task_info_api", "reference/api/ml_commons_load_api", "reference/api/ml_commons_register_api", "reference/api/ml_commons_register_pretrained_api", "reference/api/ml_commons_undeploy_model_api", "reference/api/ml_commons_unload_model_api", "reference/api/ml_commons_upload_api", "reference/api/ml_commons_upload_pretrained_api", "reference/api/opensearch_to_pandas", "reference/api/pandas_to_opensearch", "reference/api/sentence_transformer", "reference/api/sentence_transformer.load_training_data", "reference/api/sentence_transformer.make_model_config_json", "reference/api/sentence_transformer.read_queries", "reference/api/sentence_transformer.save_as_onnx", "reference/api/sentence_transformer.save_as_pt", "reference/api/sentence_transformer.set_up_accelerate_config", "reference/api/sentence_transformer.train", "reference/api/sentence_transformer.train_model", "reference/api/sentence_transformer.zip_model", "reference/dataframe", "reference/general_utility_functions", "reference/index", "reference/io", "reference/mlcommons", "reference/pre_trained_models", "reference/sentencetransformer", "reference/series"], "filenames": ["examples/demo_deploy_cliptextmodel.ipynb", "examples/demo_metrics_correlation.ipynb", "examples/demo_ml_commons_integration.ipynb", "examples/demo_notebook.ipynb", "examples/demo_tracing_model_torchscript_onnx.ipynb", "examples/demo_transformer_model_train_save_upload_to_openSearch.ipynb", "examples/index.rst", "examples/online_retail_analysis.ipynb", "index.rst", "reference/api/DataFrame.rst", "reference/api/DataFrame.agg.rst", "reference/api/DataFrame.aggregate.rst", "reference/api/DataFrame.columns.rst", "reference/api/DataFrame.count.rst", "reference/api/DataFrame.describe.rst", "reference/api/DataFrame.drop.rst", "reference/api/DataFrame.dtypes.rst", "reference/api/DataFrame.empty.rst", "reference/api/DataFrame.filter.rst", "reference/api/DataFrame.get.rst", "reference/api/DataFrame.groupby.rst", "reference/api/DataFrame.head.rst", "reference/api/DataFrame.hist.rst", "reference/api/DataFrame.idxmax.rst", "reference/api/DataFrame.idxmin.rst", "reference/api/DataFrame.index.rst", "reference/api/DataFrame.info.rst", "reference/api/DataFrame.iterrows.rst", "reference/api/DataFrame.itertuples.rst", "reference/api/DataFrame.keys.rst", "reference/api/DataFrame.mad.rst", "reference/api/DataFrame.max.rst", "reference/api/DataFrame.mean.rst", "reference/api/DataFrame.median.rst", "reference/api/DataFrame.min.rst", "reference/api/DataFrame.mode.rst", "reference/api/DataFrame.ndim.rst", "reference/api/DataFrame.nunique.rst", "reference/api/DataFrame.os_dtypes.rst", "reference/api/DataFrame.os_info.rst", "reference/api/DataFrame.os_match.rst", "reference/api/DataFrame.os_query.rst", "reference/api/DataFrame.quantile.rst", "reference/api/DataFrame.query.rst", "reference/api/DataFrame.sample.rst", "reference/api/DataFrame.select_dtypes.rst", "reference/api/DataFrame.shape.rst", "reference/api/DataFrame.size.rst", "reference/api/DataFrame.std.rst", "reference/api/DataFrame.sum.rst", "reference/api/DataFrame.tail.rst", "reference/api/DataFrame.to_csv.rst", "reference/api/DataFrame.to_html.rst", "reference/api/DataFrame.to_numpy.rst", "reference/api/DataFrame.to_pandas.rst", "reference/api/DataFrame.to_string.rst", "reference/api/DataFrame.values.rst", "reference/api/DataFrame.var.rst", "reference/api/Index.rst", "reference/api/Series.rst", "reference/api/Series.add.rst", "reference/api/Series.describe.rst", "reference/api/Series.div.rst", "reference/api/Series.divide.rst", "reference/api/Series.dtype.rst", "reference/api/Series.dtypes.rst", "reference/api/Series.empty.rst", "reference/api/Series.filter.rst", "reference/api/Series.floordiv.rst", "reference/api/Series.head.rst", "reference/api/Series.hist.rst", "reference/api/Series.index.rst", "reference/api/Series.isin.rst", "reference/api/Series.isna.rst", "reference/api/Series.isnull.rst", "reference/api/Series.mad.rst", "reference/api/Series.max.rst", "reference/api/Series.mean.rst", "reference/api/Series.median.rst", "reference/api/Series.min.rst", "reference/api/Series.mod.rst", "reference/api/Series.mode.rst", "reference/api/Series.mul.rst", "reference/api/Series.multiply.rst", "reference/api/Series.name.rst", "reference/api/Series.ndim.rst", "reference/api/Series.notna.rst", "reference/api/Series.notnull.rst", "reference/api/Series.nunique.rst", "reference/api/Series.os_dtype.rst", "reference/api/Series.os_dtypes.rst", "reference/api/Series.os_info.rst", "reference/api/Series.os_match.rst", "reference/api/Series.pow.rst", "reference/api/Series.quantile.rst", "reference/api/Series.radd.rst", "reference/api/Series.rdiv.rst", "reference/api/Series.rdivide.rst", "reference/api/Series.rename.rst", "reference/api/Series.rfloordiv.rst", "reference/api/Series.rmod.rst", "reference/api/Series.rmul.rst", "reference/api/Series.rmultiply.rst", "reference/api/Series.rpow.rst", "reference/api/Series.rsub.rst", "reference/api/Series.rsubtract.rst", "reference/api/Series.rtruediv.rst", "reference/api/Series.sample.rst", "reference/api/Series.shape.rst", "reference/api/Series.size.rst", "reference/api/Series.std.rst", "reference/api/Series.sub.rst", "reference/api/Series.subtract.rst", "reference/api/Series.sum.rst", "reference/api/Series.tail.rst", "reference/api/Series.to_numpy.rst", "reference/api/Series.to_pandas.rst", "reference/api/Series.to_string.rst", "reference/api/Series.truediv.rst", "reference/api/Series.unique.rst", "reference/api/Series.value_counts.rst", "reference/api/Series.var.rst", "reference/api/csv_to_opensearch.rst", "reference/api/groupby.DataFrameGroupBy.rst", "reference/api/groupby.DataFrameGroupBy.agg.rst", "reference/api/groupby.DataFrameGroupBy.aggregate.rst", "reference/api/groupby.DataFrameGroupBy.count.rst", "reference/api/groupby.DataFrameGroupBy.mad.rst", "reference/api/groupby.DataFrameGroupBy.max.rst", "reference/api/groupby.DataFrameGroupBy.mean.rst", "reference/api/groupby.DataFrameGroupBy.median.rst", "reference/api/groupby.DataFrameGroupBy.min.rst", "reference/api/groupby.DataFrameGroupBy.nunique.rst", "reference/api/groupby.DataFrameGroupBy.quantile.rst", "reference/api/groupby.DataFrameGroupBy.std.rst", "reference/api/groupby.DataFrameGroupBy.sum.rst", "reference/api/groupby.DataFrameGroupBy.var.rst", "reference/api/groupby.GroupBy.rst", "reference/api/ml_commons_delete_model_api.rst", "reference/api/ml_commons_delete_task_api.rst", "reference/api/ml_commons_deploy_api.rst", "reference/api/ml_commons_execute_api.rst", "reference/api/ml_commons_generate_embedding_api.rst", "reference/api/ml_commons_get_model_info_api.rst", "reference/api/ml_commons_get_task_info_api.rst", "reference/api/ml_commons_load_api.rst", "reference/api/ml_commons_register_api.rst", "reference/api/ml_commons_register_pretrained_api.rst", "reference/api/ml_commons_undeploy_model_api.rst", "reference/api/ml_commons_unload_model_api.rst", "reference/api/ml_commons_upload_api.rst", "reference/api/ml_commons_upload_pretrained_api.rst", "reference/api/opensearch_to_pandas.rst", "reference/api/pandas_to_opensearch.rst", "reference/api/sentence_transformer.rst", "reference/api/sentence_transformer.load_training_data.rst", "reference/api/sentence_transformer.make_model_config_json.rst", "reference/api/sentence_transformer.read_queries.rst", "reference/api/sentence_transformer.save_as_onnx.rst", "reference/api/sentence_transformer.save_as_pt.rst", "reference/api/sentence_transformer.set_up_accelerate_config.rst", "reference/api/sentence_transformer.train.rst", "reference/api/sentence_transformer.train_model.rst", "reference/api/sentence_transformer.zip_model.rst", "reference/dataframe.rst", "reference/general_utility_functions.rst", "reference/index.rst", "reference/io.rst", "reference/mlcommons.rst", "reference/pre_trained_models.rst", "reference/sentencetransformer.rst", "reference/series.rst"], "titles": ["Demo Notebook for deploying CLIPTextModel to OpenSearch", "Demo Notebook for Metrics Correlation Model Testing", "Demo Notebook for MLCommons Integration", "Demo Notebook for Dataframe", "Demo Notebook to trace Sentence Transformers model", "Demo Notebook for Sentence Transformer Model Training, Saving and Uploading to OpenSearch", "Examples", "Demo Notebook for Online Retail Analysis", "Opensearch-py-ml: DataFrames and Machine Learning backed by Opensearch", "DataFrame", "DataFrame.agg", "DataFrame.aggregate", "DataFrame.columns", "DataFrame.count", "DataFrame.describe", "DataFrame.drop", "DataFrame.dtypes", "DataFrame.empty", "DataFrame.filter", "DataFrame.get", "DataFrame.groupby", "DataFrame.head", "DataFrame.hist", "DataFrame.idxmax", "DataFrame.idxmin", "DataFrame.index", "DataFrame.info", "DataFrame.iterrows", "DataFrame.itertuples", "DataFrame.keys", "DataFrame.mad", "DataFrame.max", "DataFrame.mean", "DataFrame.median", "DataFrame.min", "DataFrame.mode", "DataFrame.ndim", "DataFrame.nunique", "DataFrame.os_dtypes", "DataFrame.os_info", "DataFrame.os_match", "DataFrame.os_query", "DataFrame.quantile", "DataFrame.query", "DataFrame.sample", "DataFrame.select_dtypes", "DataFrame.shape", "DataFrame.size", "DataFrame.std", "DataFrame.sum", "DataFrame.tail", "DataFrame.to_csv", "DataFrame.to_html", "DataFrame.to_numpy", "DataFrame.to_pandas", "DataFrame.to_string", "DataFrame.values", "DataFrame.var", "opensearch_py_ml.Index", "Series", "Series.add", "Series.describe", "Series.div", "Series.divide", "Series.dtype", "Series.dtypes", "Series.empty", "Series.filter", "Series.floordiv", "Series.head", "Series.hist", "Series.index", "Series.isin", "Series.isna", "Series.isnull", "Series.mad", "Series.max", "Series.mean", "Series.median", "Series.min", "Series.mod", "Series.mode", "Series.mul", "Series.multiply", "Series.name", "Series.ndim", "Series.notna", "Series.notnull", "Series.nunique", "Series.os_dtype", "Series.os_dtypes", "Series.os_info", "Series.os_match", "Series.pow", "Series.quantile", "Series.radd", "Series.rdiv", "Series.rdivide", "Series.rename", "Series.rfloordiv", "Series.rmod", "Series.rmul", "Series.rmultiply", "Series.rpow", "Series.rsub", "Series.rsubtract", "Series.rtruediv", "Series.sample", "Series.shape", "Series.size", "Series.std", "Series.sub", "Series.subtract", "Series.sum", "Series.tail", "Series.to_numpy", "Series.to_pandas", "Series.to_string", "Series.truediv", "Series.unique", "Series.value_counts", "Series.var", "csv_to_opensearch", "groupby.DataFrameGroupBy", "groupby.DataFrameGroupBy.agg", "groupby.DataFrameGroupBy.aggregate", "groupby.DataFrameGroupBy.count", "groupby.DataFrameGroupBy.mad", "groupby.DataFrameGroupBy.max", "groupby.DataFrameGroupBy.mean", "groupby.DataFrameGroupBy.median", "groupby.DataFrameGroupBy.min", "groupby.DataFrameGroupBy.nunique", "groupby.DataFrameGroupBy.quantile", "groupby.DataFrameGroupBy.std", "groupby.DataFrameGroupBy.sum", "groupby.DataFrameGroupBy.var", "groupby.GroupBy", "Delete Model", "Delete Task", "Deploy Model", "Execute", "Generate Embedding", "Get Model Info", "Get Task Info", "Load Model", "Register Model", "Register Pretrained Model", "Undeploy Model", "Unload Model", "Upload Model", "Upload Pretrained Model", "opensearch_to_pandas", "pandas_to_opensearch", "Sentence Transformer", "SentenceTransformerModel.load_training_data", "SentenceTransformerModel.make_model_config_json", "SentenceTransformerModel.read_queries", "SentenceTransformerModel.save_as_onnx", "SentenceTransformerModel.save_as_pt", "SentenceTransformerModel.set_up_accelerate_config", "SentenceTransformerModel.train", "SentenceTransformerModel.train_model", "SentenceTransformerModel.zip_model", "DataFrame", "General Utility Functions", "API Reference", "Input/Output", "MLCommons Support", "Pre-trained models", "Sentence Transformer", "Series"], "terms": {"relat": [0, 4, 5, 122, 144], "doc": [0, 2, 4, 141, 146, 147, 150, 151], "ml": [0, 1, 2, 3, 4, 5, 7, 13, 28, 119, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 156, 166], "framework": [0, 4, 146, 150], "huggingfac": [0, 2, 4, 5, 154, 158, 159, 161], "clip": 0, "thi": [0, 1, 2, 3, 4, 7, 9, 13, 18, 21, 26, 37, 39, 40, 47, 50, 52, 53, 55, 56, 58, 59, 67, 92, 98, 109, 115, 117, 120, 123, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 161, 166], "provid": [0, 2, 4, 5, 14, 61], "walkthrough": [0, 2, 4], "user": [0, 2, 4, 5, 15, 37, 40, 43, 154, 156, 157, 160, 161, 169], "from": [0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 53, 57, 59, 60, 61, 62, 63, 65, 67, 68, 70, 71, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 115, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 148, 149, 152, 153, 154, 156, 157, 158, 159], "local": [0, 5, 7, 141], "can": [0, 1, 2, 4, 5, 7, 8, 9, 13, 22, 28, 37, 40, 52, 55, 58, 59, 117, 120, 141, 145, 146, 147, 149, 150, 151, 152, 154, 160, 162, 169], "us": [0, 1, 2, 4, 5, 7, 8, 9, 10, 11, 13, 20, 21, 37, 40, 41, 42, 44, 50, 58, 70, 92, 94, 122, 124, 125, 133, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 156, 160, 161, 162, 163, 164, 169], "neural": 0, "search": [0, 4, 5, 18, 39, 40, 67, 92, 120, 122, 158, 159, 162], "plugin": [0, 2, 4, 140, 141, 145, 146, 147, 150, 151], "gener": [0, 8, 14, 37, 44, 61, 120, 154, 156, 157, 161, 166], "embed": [0, 156, 166], "document": [0, 4, 5, 8, 13, 44, 58, 161, 162], "ingest": 0, "time": [0, 1, 3, 4, 5, 7, 8, 47, 109, 154], "queri": [0, 7, 13, 39, 40, 41, 46, 58, 92, 108, 154, 157, 161, 164], "6": [0, 1, 3, 4, 5, 7, 15, 20, 31, 35, 37, 40, 57, 81, 99, 122, 124, 125, 128, 133, 135], "transform": [0, 2, 6, 8, 156, 158, 159, 161, 162, 166, 169], "clipprocessor": 0, "torch": [0, 4, 5, 159, 162, 169], "opensearch_py_ml": [0, 1, 2, 4, 5, 7, 9, 18, 20, 21, 25, 26, 27, 28, 39, 40, 41, 43, 44, 45, 50, 53, 54, 59, 60, 62, 63, 67, 68, 71, 73, 74, 80, 82, 83, 86, 87, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 111, 112, 115, 118, 119, 120, 122, 123, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163], "oml": [0, 1, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 53, 56, 57, 59, 60, 61, 62, 63, 65, 68, 70, 71, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 115, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 152, 153], "ml_common": [0, 1, 2, 4, 5, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151], "mlcommoncli": [0, 1, 2, 4, 5, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151], "opensearchpi": [0, 1, 2, 3, 4, 5, 7, 59, 122], "warn": [0, 1, 2, 3, 4, 5, 7], "filterwarn": [0, 1, 2, 3, 4, 5, 7], "ignor": [0, 1, 2, 3, 4, 5, 7, 10, 11, 14, 15, 40, 61, 92, 124, 125, 153], "messag": [0, 2, 4, 5, 122, 146, 150], "unverifi": [0, 2, 4, 5], "http": [0, 1, 2, 3, 4, 5, 7, 141, 146, 147, 150, 151], "request": [0, 2, 4, 5, 15, 23, 24, 153], "7": [0, 1, 3, 4, 5, 7, 35, 40, 81, 122, 132, 135, 141, 145, 149, 150, 151], "connect": [0, 1, 2, 3, 4, 5, 7], "cluster": [0, 1, 3, 4, 7, 138, 139, 140, 143, 144, 145, 146, 147, 150, 151, 152, 158, 159, 163], "host": [0, 1, 2, 3, 4, 5, 7], "localhost": [0, 1, 2, 3, 4, 5, 7], "port": [0, 4], "9200": [0, 1, 2, 3, 4, 5, 7], "auth": 0, "admin": [0, 1, 2, 3, 4, 5, 7], "password": [0, 1, 2, 3, 4, 5, 7], "For": [0, 2, 5, 13, 15, 22, 58, 98, 152, 161], "test": [0, 2, 3, 4, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 53, 57, 59, 60, 61, 62, 63, 65, 68, 70, 71, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 115, 118, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 152, 153], "onli": [0, 1, 3, 5, 7, 10, 11, 13, 14, 37, 45, 61, 98, 120, 141], "don": [0, 2, 4, 35, 61, 169], "t": [0, 1, 2, 4, 5, 7, 35, 40, 58, 61, 92, 169], "store": [0, 8, 9, 146, 147, 150, 151, 154, 157, 161], "credenti": 0, "code": [0, 1, 8, 26, 122], "def": [0, 1, 2, 3, 4, 5, 7], "get_os_cli": [0, 1, 2, 3, 4, 5, 7], "get": [0, 1, 4, 5, 156, 160, 164, 166], "param": [0, 1, 2, 3, 4, 5, 7, 156, 161], "cluster_url": [0, 1, 2, 3, 4, 5, 7], "url": [0, 1, 2, 3, 4, 5, 7, 162], "like": [0, 1, 2, 3, 4, 7, 18, 41, 42, 59, 67, 94, 133, 141], "te": [0, 1, 2, 3, 4, 5, 7], "netwo": [0, 1, 2, 3, 4, 5, 7], "1s12ba42br23v": [0, 1, 2, 3, 4, 5, 7], "ff1736fa7db98ff2": [0, 1, 2, 3, 4, 5, 7], "elb": [0, 1, 2, 3, 4, 5, 7], "u": [0, 1, 2, 3, 4, 5, 7, 20, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136], "west": [0, 1, 2, 3, 4, 5, 7], "amazonaw": [0, 1, 2, 3, 4, 5, 7], "com": [0, 1, 2, 3, 4, 5, 7], "443": [0, 1, 2, 3, 4, 5, 7], "return": [0, 1, 2, 3, 4, 5, 7, 35, 53, 56, 64, 66, 81, 89, 115, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 162, 163], "http_compress": 0, "true": [0, 2, 3, 4, 5, 7, 9, 10, 11, 15, 17, 18, 20, 22, 27, 28, 30, 31, 32, 33, 34, 35, 39, 40, 42, 48, 49, 51, 52, 55, 57, 66, 67, 70, 92, 117, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 145, 146, 147, 150, 151, 152, 153, 154, 157, 161], "enabl": [0, 58, 157, 161], "gzip": [0, 7], "compress": [0, 7, 51, 122], "bodi": [0, 3, 7, 39, 40, 92], "http_auth": [0, 1, 2, 3, 4, 5, 7], "use_ssl": 0, "fals": [0, 1, 2, 3, 4, 5, 7, 9, 10, 11, 15, 17, 20, 22, 27, 28, 30, 31, 32, 33, 34, 35, 39, 40, 42, 48, 49, 52, 54, 55, 57, 66, 92, 116, 117, 122, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 144, 146, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163], "verify_cert": [0, 1, 2, 3, 4, 5, 7], "ssl_assert_hostnam": 0, "ssl_show_warn": 0, "8": [0, 1, 2, 3, 4, 5, 7, 10, 11, 35, 49, 81, 122, 153], "ml_client": [0, 1, 2, 4, 5], "To": [0, 1, 2, 4, 5, 7, 162], "you": [0, 1, 2, 4, 5, 7, 8, 41, 145, 149, 150, 151], "ll": [0, 1], "need": [0, 2, 4, 5, 41], "portabl": 0, "format": [0, 5, 146, 150, 156, 158, 159, 161, 162, 169], "As": [0, 1], "version": [0, 2, 4, 5, 8, 145, 146, 147, 149, 150, 151, 156, 169], "5": [0, 1, 3, 7, 9, 15, 21, 27, 28, 35, 39, 41, 42, 50, 53, 60, 62, 63, 68, 69, 70, 80, 81, 82, 83, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 111, 112, 114, 115, 118, 122, 127, 132, 133, 152, 161, 162], "support": [0, 3, 5, 7, 8, 10, 11, 14, 15, 31, 32, 34, 49, 61, 76, 77, 78, 79, 98, 113, 122, 141, 147, 151, 166], "onnx": [0, 147, 151, 158, 169], "requir": [0, 1, 2, 3, 4, 5, 40, 53, 56, 58, 115, 152, 155, 156, 157, 159, 160, 161, 162, 169], "two": [0, 1, 2, 4, 9], "thing": [0, 2], "instanti": [0, 7], "flag": 0, "forward": 0, "pass": [0, 5, 7, 10, 11, 40, 92], "dummi": [0, 4], "input": [0, 1, 2, 3, 4, 5, 8, 70, 155, 162, 166], "The": [0, 1, 4, 5, 9, 12, 14, 16, 18, 21, 23, 24, 27, 28, 30, 38, 48, 50, 57, 58, 59, 61, 65, 67, 90, 141, 147, 151, 152, 154, 156, 157, 158, 159], "ar": [0, 1, 2, 4, 5, 7, 10, 11, 13, 15, 16, 18, 20, 22, 23, 24, 31, 32, 33, 34, 40, 42, 46, 48, 49, 57, 59, 65, 67, 76, 77, 78, 79, 92, 113, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 156, 160, 164, 166], "": [0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 14, 22, 25, 40, 42, 45, 53, 56, 61, 71, 75, 76, 77, 78, 79, 88, 92, 94, 110, 113, 115, 121, 133, 140, 145, 146, 147, 150, 151, 154], "while": [0, 5, 162], "valu": [0, 1, 2, 4, 5, 7, 10, 11, 14, 15, 19, 20, 22, 23, 24, 26, 28, 30, 31, 32, 33, 34, 35, 42, 48, 49, 51, 53, 57, 58, 61, 73, 74, 75, 76, 77, 78, 79, 81, 86, 87, 88, 94, 110, 113, 115, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 142, 153, 154, 160, 161, 163, 164], "propag": 0, "through": [0, 1, 2, 4, 5, 8], "layer": 0, "pytorch": [0, 4, 5], "keep": [0, 18, 67], "track": 0, "differ": [0, 1, 4, 5, 7, 58, 119, 154], "oper": [0, 3, 10, 11, 15, 20, 39, 58, 60, 62, 63, 68, 80, 82, 83, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 111, 112, 118, 146, 147, 150, 151, 166], "execut": [0, 1, 5, 166], "each": [0, 1, 5, 13, 16, 28, 30, 31, 32, 33, 34, 37, 38, 42, 48, 49, 57, 65, 73, 74, 86, 87, 90, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136], "tensor": [0, 4], "These": 0, "record": 0, "creat": [0, 2, 3, 4, 5, 7, 13, 26, 59, 122, 146, 147, 150, 151, 152, 153, 155], "text": [0, 1, 13, 37, 40, 92, 120, 153], "i": [0, 1, 2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 17, 18, 21, 22, 26, 31, 32, 33, 34, 35, 42, 46, 48, 49, 50, 53, 56, 57, 58, 59, 61, 66, 67, 73, 74, 86, 87, 98, 115, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 140, 141, 142, 145, 146, 147, 150, 151, 153, 156, 157, 158, 159, 160, 161, 162], "multi": [0, 169], "modal": 0, "we": [0, 1, 2, 4, 5, 7, 8, 10, 11, 22, 28, 37, 52, 55, 117, 120, 144, 146, 147, 150, 151, 161, 162, 169], "here": [0, 1, 4, 5, 7], "14": [0, 1, 2, 3, 4, 7, 9, 35, 39, 81, 100, 128, 129, 152], "model_nam": [0, 2, 147, 151, 156, 158, 159, 163], "openai": 0, "vit": 0, "base": [0, 4, 5, 13, 21, 45, 50, 59, 154, 156, 158, 159, 160, 162, 169], "patch32": 0, "see": [0, 1, 2, 4, 7, 22, 26, 29, 70], "co": [0, 4, 5, 169], "other": [0, 1, 4, 72, 92, 160], "option": [0, 4, 5, 9, 40, 44, 92, 122, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 166], "text_to_encod": 0, "exampl": [0, 1, 2, 4, 5, 7, 8, 146, 150, 155, 156, 159, 161], "more": [0, 1, 4, 5, 7, 10, 11, 14, 40, 61, 92, 146, 150, 156, 160, 162, 163], "info": [0, 7, 18, 67, 147, 151, 164, 166], "pretrain": [0, 2, 154, 166], "weight": [0, 22], "from_pretrain": 0, "return_dict": 0, "processor": 0, "text_input": 0, "return_tensor": 0, "pt": [0, 2, 4, 5, 158, 159, 161, 162, 163], "max_length": [0, 162], "77": [0, 122], "pad": 0, "truncat": [0, 5, 162], "dummy_input": 0, "input_id": [0, 4], "attention_mask": [0, 4], "convert": [0, 54, 122, 152, 153, 158, 159], "object": [0, 1, 3, 7, 12, 14, 15, 16, 19, 21, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34, 38, 39, 45, 47, 48, 49, 50, 53, 57, 59, 60, 61, 64, 65, 81, 90, 98, 109, 115, 138, 139, 140, 142, 143, 144, 145, 148, 149, 153, 154, 156, 166], "traced_model": 0, "jit": 0, "save": [0, 6, 8, 154, 156, 158, 159, 161, 162], "traced_model_exampl": 0, "zip": [0, 2, 4, 5, 146, 150, 156, 157, 158, 159, 161, 163], "togeth": [0, 20], "tokenizor": 0, "json": [0, 2, 4, 5, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 150, 156, 158, 159, 163], "found": [0, 1, 4, 5, 19], "addition": 0, "config": [0, 2, 4, 5, 156, 160, 166, 169], "follow": [0, 1, 2, 4, 5, 28, 52, 55, 117, 154], "detail": [0, 2, 4, 14, 26, 61, 117, 138, 139, 143, 144], "must": [0, 3, 7, 9, 10, 11, 39, 41, 46, 58], "19": [0, 3, 4, 7, 20, 32, 35, 81, 100, 130, 131, 135], "sampl": [0, 164, 171], "content": [0, 2, 4, 5, 18, 58, 67, 156], "name": [0, 1, 2, 3, 4, 5, 7, 10, 11, 12, 18, 19, 27, 28, 29, 42, 59, 60, 61, 62, 63, 67, 68, 80, 81, 82, 83, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 111, 112, 115, 117, 118, 120, 122, 141, 142, 146, 147, 150, 151, 153, 154, 156, 158, 159, 161, 162, 163, 171], "model_format": [0, 2, 4, 146, 147, 150, 151, 156], "torch_script": [0, 2, 4, 146, 147, 150, 151, 156], "model_config": [0, 2, 4, 5, 146, 150], "model_typ": [0, 2, 4, 146, 150, 156], "embedding_dimens": [0, 2, 4, 146, 150, 156], "512": [0, 2, 5, 162], "framework_typ": [0, 2, 4, 146, 150], "huggingface_transform": 0, "should": [0, 120, 161], "match": [0, 40, 92, 153], "id": [0, 2, 4, 5, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 158, 159], "output": [0, 1, 2, 4, 8, 14, 55, 61, 152, 154, 157, 166], "next": [0, 1, 7], "cell": [0, 5, 13], "22": [0, 3, 4, 7, 35, 41, 81, 94, 128, 129, 130], "model_path": [0, 2, 4, 5, 146, 150, 163], "your_path": 0, "model_config_path": [0, 2, 5, 146, 150], "model_id_file_system": [0, 2], "register_model": [0, 2, 4, 146, 150, 168], "isverbos": [0, 2, 4, 5, 146, 150], "deploy_model": [0, 2, 140, 145, 146, 147, 168], "total": [0, 1, 2, 3, 4, 5, 7, 26, 98, 122], "number": [0, 1, 2, 3, 4, 5, 13, 21, 22, 35, 44, 45, 46, 47, 50, 81, 88, 108, 109, 120, 122, 153, 156, 160, 161, 162], "chunk": [0, 2, 4, 5, 146, 147, 150, 151], "sha1": [0, 2, 4, 5], "62f4786ef2d546180dbbaf8fe6b5be218243c8b806e6623840b1fe9d11bcad4a": 0, "meta": [0, 2, 4, 5], "data": [0, 2, 4, 8, 9, 10, 11, 14, 16, 21, 22, 26, 27, 28, 38, 40, 50, 51, 52, 58, 61, 64, 65, 89, 90, 92, 122, 124, 125, 142, 153, 155, 162, 166], "wa": [0, 1, 2, 4, 5, 7, 98, 148, 149], "successfulli": [0, 2, 4, 5], "uy7roobhmcn7ynh0lgk": 0, "upload": [0, 4, 6, 8, 146, 147, 158, 159, 163, 166, 169], "39": [0, 1, 2, 3, 4, 5, 7, 35, 81, 94, 128, 129], "statu": [0, 2, 4, 5, 140, 145], "9": [0, 1, 2, 3, 4, 5, 10, 11, 35, 41, 81, 99, 122], "10": [0, 1, 2, 3, 4, 5, 7, 9, 20, 22, 35, 39, 41, 70, 81, 101, 102, 120, 122, 126, 130, 132, 152, 161, 162], "11": [0, 2, 3, 4, 5, 7, 9, 31, 35, 39, 40, 81, 122, 128, 129, 130, 152], "12": [0, 1, 2, 3, 4, 7, 8, 31, 35, 81, 94, 122, 128, 152], "13": [0, 2, 3, 4, 7, 9, 20, 92, 99, 122, 130, 152], "15": [0, 1, 2, 3, 4, 5, 7, 35, 39, 42, 81, 129], "16": [0, 1, 3, 4, 7, 42, 122, 129, 130], "17": [0, 1, 3, 4, 7, 9, 20, 128, 129, 130, 131, 152], "18": [0, 1, 3, 4, 7, 9, 35, 62, 63, 68, 81, 118, 129, 130, 152], "23": [0, 2, 3, 4, 7, 31, 33, 35, 42, 81, 94, 128, 129, 130], "model_id": [0, 2, 4, 138, 140, 142, 143, 145, 146, 147, 148, 149, 150, 151, 154, 158, 159, 161, 162, 163], "your": [0, 4, 5, 7, 8, 21, 50], "previou": [0, 2, 154], "task_id": [0, 139, 140, 144, 145], "y8roobhmcn7ynhyfg6": 0, "task_typ": [0, 2], "function_nam": [0, 2], "text_embed": [0, 2], "state": [0, 2, 5, 7, 122], "complet": [0, 2], "worker_nod": [0, 2], "4k6ceipptkkiwzmplvj6cq": 0, "create_tim": [0, 2], "1695148695608": 0, "last_update_tim": [0, 2], "1695148703362": 0, "is_async": [0, 2], "24": [0, 3, 4, 7, 20, 35, 81, 131], "check": [0, 4, 7, 40, 92, 156, 160], "get_model_info": [0, 2, 143, 168], "traced_model_example3": 0, "model_group_id": [0, 2, 146, 147], "ey7roobhmcn7ynh0vji": 0, "algorithm": [0, 1, 2, 141, 164], "model_vers": [0, 2, 147, 151], "model_st": [0, 2], "model_content_size_in_byt": [0, 2, 156], "186945250": 0, "model_content_hash_valu": [0, 2, 156], "created_tim": [0, 2], "1695148659209": 0, "last_updated_tim": [0, 2], "last_deployed_tim": [0, 2], "total_chunk": [0, 2], "planning_worker_node_count": [0, 2], "current_worker_node_count": [0, 2], "planning_worker_nod": [0, 2], "deploy_to_all_nod": [0, 2], "contain": [1, 2, 5, 7, 9, 19, 20, 44, 45, 59, 119, 152, 157, 161], "an": [1, 3, 4, 7, 9, 13, 18, 28, 39, 40, 41, 47, 50, 52, 55, 58, 59, 67, 73, 74, 86, 87, 92, 109, 117, 122, 152, 153, 166], "releas": [1, 2, 5], "opensearch": [1, 3, 6, 7, 9, 12, 13, 16, 25, 26, 27, 28, 29, 37, 38, 39, 40, 41, 46, 51, 52, 53, 56, 58, 59, 65, 71, 89, 90, 92, 98, 108, 115, 119, 120, 122, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 163, 166, 169], "work": [1, 2, 5, 10, 11, 40, 92, 154], "server": 1, "machin": [1, 2, 5, 160, 161], "dataset": [1, 5, 8, 14, 41, 61], "includ": [1, 3, 5, 7, 22, 26, 39, 45, 122, 153], "commentari": 1, "configur": [1, 2, 5, 9, 154], "itself": 1, "pleas": [1, 2, 4, 5], "instal": [1, 2, 4, 5], "packag": [1, 8], "termin": [1, 5], "haven": [1, 5], "alreadi": [1, 2, 5, 122, 153], "thei": [1, 5, 13, 61, 119, 169], "also": [1, 2, 5, 7, 58], "uncom": [1, 5], "line": [1, 5], "second": [1, 4], "block": 1, "load_ext": [1, 3, 7], "autoreload": [1, 3, 7], "pip": [1, 2, 4, 5, 8], "panda": [1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 64, 65, 67, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 85, 86, 87, 88, 90, 94, 98, 109, 110, 113, 115, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 152, 153, 157, 166], "matplotlib": [1, 3, 5, 7, 70], "numpi": [1, 3, 4, 5, 7, 8, 53, 56, 115], "py": [1, 2, 3, 4, 5, 7, 28, 119, 166], "stop": [1, 3, 7], "yell": [1, 3, 7], "everi": [1, 3, 4, 5, 7, 58, 142, 152, 154, 169], "datafram": [1, 7, 58, 60, 61, 62, 63, 65, 67, 68, 70, 71, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 115, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 152, 153, 155, 157, 166], "made": [1, 3, 5, 7], "pd": [1, 3, 5, 7, 12, 119, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 153, 155], "np": [1, 3, 4, 5, 7, 10, 11, 22, 45, 103], "pyplot": [1, 3, 7, 70], "plt": [1, 3, 7, 22, 70], "standard": [1, 3, 4, 7, 30, 48, 110, 134], "consist": [1, 3, 5, 7, 61], "conftest": [1, 3, 7], "usernam": [1, 2, 3, 4, 5, 7], "timeout": 1, "30": [1, 3, 7, 20, 41, 94, 131], "read": [1, 7, 8, 40, 92, 122, 152, 153, 156, 157, 161], "csv": [1, 7, 51, 122], "file": [1, 4, 5, 7, 51, 122, 146, 150, 154, 156, 157, 158, 159, 161, 162, 163, 166, 169], "df_pd": 1, "read_csv": [1, 122], "smd_data": 1, "header": [1, 51, 52, 55, 117, 122], "none": [1, 3, 4, 5, 7, 9, 10, 11, 15, 18, 19, 20, 22, 26, 27, 28, 31, 32, 33, 34, 39, 40, 42, 44, 45, 48, 49, 51, 52, 53, 55, 57, 58, 59, 67, 70, 75, 76, 77, 78, 79, 92, 107, 110, 113, 115, 117, 121, 122, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 153, 154, 156, 158, 159, 160, 161, 162, 163], "998": 1, "999": 1, "023229": 1, "019744": 1, "025552": 1, "024390": 1, "910256": 1, "912821": 1, "338983": 1, "339925": 1, "067797": 1, "068738": 1, "011496": 1, "012064": 1, "013625": 1, "014334": 1, "013699": 1, "027397": 1, "041096": 1, "150411": 1, "166988": 1, "131524": 1, "131827": 1, "405081": 1, "399555": 1, "484677": 1, "481303": 1, "005224": 1, "008237": 1, "007500": 1, "009327": 1, "009096": 1, "007172": 1, "011545": 1, "009620": 1, "row": [1, 3, 7, 9, 15, 18, 20, 21, 27, 28, 35, 39, 40, 41, 44, 46, 47, 50, 53, 67, 81, 92, 108, 109, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 152, 153], "1000": 1, "column": [1, 5, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 61, 65, 67, 90, 92, 98, 108, 109, 120, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 152, 153, 164], "In": [1, 2, 4, 5, 8, 52, 53, 55, 56, 58, 115, 117, 169], "case": [1, 2, 4, 58], "studi": 1, "consid": [1, 35], "recent": 1, "suggest": 1, "perform": [1, 5, 20], "collect": [1, 5, 72], "industri": 1, "occasion": 1, "suffer": 1, "degrad": 1, "appear": 1, "take": [1, 2, 4, 5, 40, 92, 158, 159, 162], "role": 1, "op": 1, "engin": [1, 2, 122], "investig": 1, "understand": [1, 7], "whether": [1, 15, 73, 74, 86, 87, 140, 145, 146, 147, 150, 151, 156, 158, 159, 163], "how": [1, 2, 7, 120, 122, 153, 160], "issu": [1, 2, 5, 8, 13], "have": [1, 2, 4, 5, 7, 13, 162, 169], "occur": [1, 59], "individu": 1, "displai": [1, 5], "veri": [1, 5, 25, 58, 71], "behavior": [1, 119], "yet": 1, "across": 1, "essenti": 1, "detect": [1, 73, 74, 86, 87], "diagnos": 1, "start": [1, 5], "let": [1, 7], "plot": [1, 22, 70, 161, 162, 166], "It": [1, 4, 5, 7, 21, 50], "observ": 1, "timestamp": [1, 3, 9, 10, 11, 12, 16, 20, 23, 24, 30, 31, 32, 33, 34, 35, 38, 39, 42, 45, 48, 49, 57, 65, 90, 94, 127, 128, 129, 130, 131, 133, 136, 152, 153], "normal": [1, 156], "seri": [1, 8, 10, 11, 13, 14, 16, 18, 19, 22, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 37, 38, 40, 47, 48, 49, 57, 122, 153, 166], "its": [1, 18, 67, 158, 159, 163], "lie": 1, "between": [1, 4, 5, 8, 42, 94, 119, 133], "42": [1, 3, 7, 129, 130, 135], "m": [1, 2, 5, 8], "shape": [1, 2, 4, 14, 43, 61, 142, 164, 171], "figur": 1, "figsiz": [1, 3, 7, 22, 70], "cm": 1, "get_cmap": 1, "dark2": 1, "val": 1, "arang": 1, "rang": [1, 3, 7, 39, 58], "iloc": 1, "color": 1, "titl": 1, "ylabel": 1, "xlabel": 1, "find": [1, 5, 161, 162, 163], "event": 1, "where": [1, 2, 5, 8, 9, 31, 32, 33, 34, 42, 48, 49, 57, 127, 128, 129, 130, 131, 132, 134, 135, 136, 156, 158, 159], "window": [1, 166], "multipl": [1, 4, 13, 35, 40, 81, 82, 83, 101, 102, 146, 150], "simultan": 1, "anomal": 1, "given": [1, 4, 5, 19, 40, 42, 92, 94, 119, 133, 142, 148, 149, 156], "span": 1, "automat": [1, 4, 120], "determin": [1, 17, 66, 120], "mani": [1, 7, 120, 160], "when": [1, 2, 5, 7, 10, 11, 40, 52, 55, 92, 117, 144, 153, 154], "which": [1, 2, 4, 5, 7, 8, 10, 11, 18, 31, 32, 33, 34, 35, 40, 42, 48, 49, 57, 58, 67, 92, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 142, 148, 149, 169], "were": 1, "involv": [1, 53, 56, 115], "prior": 1, "train": [1, 2, 8, 141, 154, 155, 156, 162, 163, 166], "minim": [1, 5], "input_json": [1, 141], "tolist": 1, "now": [1, 2, 4, 5, 7, 122], "run": [1, 2, 5, 7, 144, 154, 160, 161], "via": [1, 8, 16, 22, 40, 65], "api": [1, 2, 4, 5, 8, 9, 25, 59, 71, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151], "algorithm_nam": [1, 141], "metrics_correl": 1, "list": [1, 2, 3, 4, 7, 9, 10, 11, 13, 18, 20, 39, 40, 42, 67, 94, 120, 122, 123, 124, 125, 133, 142, 148, 149, 153, 155, 159, 161, 162, 169], "element": [1, 28, 47, 60, 62, 63, 68, 73, 74, 80, 82, 83, 86, 87, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 118], "ha": [1, 5, 21, 25, 35, 37, 50, 58, 71, 81, 141, 142, 147, 151], "discov": 1, "If": [1, 2, 3, 5, 8, 10, 11, 15, 17, 20, 28, 40, 41, 46, 53, 56, 59, 92, 115, 146, 147, 150, 151, 156, 158, 159, 161, 162, 163], "length": [1, 3, 4, 5, 7, 19, 59, 98, 117, 122, 161, 162], "zero": 1, "len": [1, 46, 108], "inference_result": [1, 2, 4, 142], "repres": [1, 46, 47, 108, 109], "dictionari": [1, 41, 141, 161], "three": [1, 5], "field": [1, 2, 7, 9, 12, 13, 21, 25, 27, 28, 29, 37, 40, 50, 58, 59, 71, 92, 98, 120, 153, 156], "end": [1, 5], "index": [1, 2, 9, 10, 11, 12, 15, 18, 21, 23, 24, 26, 27, 28, 29, 38, 39, 43, 44, 50, 51, 52, 53, 55, 56, 59, 67, 90, 98, 115, 117, 122, 152, 153, 166], "describ": [1, 5, 7, 164, 171], "suspect": 1, "indic": [1, 9, 73, 74, 86, 87, 122, 144, 152], "all": [1, 2, 5, 7, 10, 11, 22, 31, 32, 33, 34, 35, 40, 42, 48, 49, 57, 92, 113, 119, 123, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 146, 148, 149, 150, 152, 156, 160, 162, 166, 169], "part": 1, "dure": [1, 5], "pattern": [1, 9, 59], "arrai": [1, 3, 22, 42, 53, 94, 115, 133], "rel": 1, "intens": [1, 5], "correspond": [1, 4, 5, 169], "underli": [1, 7, 9, 64, 89, 98, 166], "idea": [1, 8], "roughli": [1, 161], "focus": 1, "kei": [1, 19, 20, 140, 145, 161, 164], "dict_kei": 1, "event_window": 1, "event_pattern": 1, "suspected_metr": 1, "below": [1, 5, 14, 61], "implement": [1, 5, 31, 32, 34, 37, 49, 52, 53, 55, 56, 76, 77, 78, 79, 113, 115, 117, 120], "abov": [1, 5], "highlight": 1, "shade": 1, "interv": 1, "line2d": 1, "plot_ev": 1, "_": [1, 41], "ax": [1, 9, 22, 70], "subplot": 1, "non": [1, 3, 13, 26, 31, 32, 34, 40, 49, 76, 77, 78, 79, 86, 87, 92, 113], "grayscal": 1, "lightgrai": 1, "maroon": 1, "fill_between": 1, "skyblu": 1, "alpha": [1, 70], "label": [1, 5, 9, 10, 11, 12, 15, 18, 67, 166], "set_ylabel": 1, "add": [1, 4, 13, 14, 43, 61, 95, 98, 158, 159, 163, 171], "legend": 1, "sus_met": 1, "unsus_met": 1, "handl": 1, "get_legend_handles_label": 1, "extend": 1, "loc": 1, "upper": 1, "left": [1, 5, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106], "facecolor": 1, "white": 1, "framealpha": 1, "scale": 1, "max": [1, 5, 7, 10, 11, 14, 20, 61, 124, 125, 161, 162, 164, 171], "darkorang": 1, "linewidth": 1, "set_xlabel": 1, "show": [1, 2, 3, 4, 5, 7, 70, 152], "easili": 1, "both": [1, 2, 4, 14, 61], "first": [1, 2, 4, 5, 7, 8, 21, 23, 24, 28, 60, 119, 122, 146, 147, 150, 151], "print": [1, 2, 3, 4, 5, 7, 26, 27, 28, 39, 53, 115, 146, 150, 156, 160, 162, 163], "325": [1, 133], "401": 1, "featur": [1, 13], "larg": [1, 5, 8, 152], "rise": 1, "clearli": 1, "visibl": 1, "howev": [1, 5, 13, 22, 162], "associ": 1, "sever": [1, 5, 10, 11], "subtl": 1, "chang": [1, 5, 59, 98], "one": [1, 5, 7, 10, 11], "significantli": 1, "contribut": [1, 8], "upon": 1, "closer": 1, "examin": 1, "without": 1, "domin": 1, "shift": 1, "same": [1, 3, 4, 5, 19, 31, 32, 33, 34, 42, 48, 49, 57, 127, 128, 129, 130, 131, 132, 134, 135, 136], "period": 1, "demonstr": [1, 2, 3, 5, 7], "44": [1, 3, 20, 35, 81, 130, 131], "ix": 1, "x": [1, 2, 4, 5, 9, 15, 20, 21, 27, 28, 39, 40, 41, 50, 53, 92, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 152, 153], "event_start": 1, "event_end": 1, "20": [1, 3, 4, 7, 32, 35, 39, 42, 81, 94, 128, 130], "40": [1, 39, 62, 63, 68, 118, 129, 130], "692": 1, "780": 1, "captur": 1, "sharp": 1, "drop": [1, 3, 20, 164], "again": 1, "initi": [1, 5, 154], "been": [1, 5], "smaller": 1, "along": [1, 5], "whose": 1, "flat": [1, 166], "slow": 1, "guidanc": [2, 4], "invok": 2, "sentence_transformer_model": [2, 4, 5], "pypi": [2, 4, 5, 8], "deprec": [2, 145, 149, 150, 151], "scheme": 2, "distutil": 2, "longer": 2, "futur": 2, "homebrew": 2, "linuxbrew": [2, 4], "python": [2, 4, 8, 59], "discuss": 2, "github": [2, 4], "core": [2, 3, 9, 53, 115, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 152, 153], "76621": 2, "satisfi": 2, "home": [2, 4, 158, 159], "lib": [2, 4], "python3": [2, 4], "site": [2, 4], "wrapt": 2, "lt": [2, 3, 5], "gt": [2, 3, 5, 7, 39], "notic": 2, "A": [2, 5, 9, 39, 40, 43, 59, 119, 146, 150, 153], "new": [2, 8, 15, 35, 98, 122, 153], "avail": [2, 5, 7, 160], "updat": [2, 4, 46], "upgrad": 2, "categori": [2, 4, 5, 37, 40, 92], "deprecationwarn": [2, 4, 5], "opt": [2, 4], "http_urllib3": [2, 4], "199": [2, 4, 60, 62, 63, 68, 80, 82, 83, 93, 95, 96, 97, 99, 100, 101, 102, 104, 105, 106, 111, 112, 118], "userwarn": [2, 4], "ssl": [2, 4], "insecur": [2, 4], "learn": [2, 5, 161, 162], "regist": [2, 143, 150, 151, 166], "group": [2, 20, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 146, 147], "look": [2, 4, 8], "project": [2, 4, 13], "common": [2, 4, 5, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151], "blob": [2, 4], "model_access_control": 2, "md": [2, 4, 156], "our": [2, 4, 5, 7], "register_pretrained_model": [2, 147, 151, 168], "minilm": [2, 5, 146, 150, 169], "l12": [2, 169], "v2": [2, 5, 146, 150, 169], "d4hfsygbfp6ijxccqpwi": 2, "wait_until_deploi": [2, 140, 146, 147], "introduc": [2, 5], "pre": [2, 5, 22, 154, 156], "org": [2, 5, 141, 146, 147, 150, 151], "latest": [2, 146, 147, 150, 151], "One": 2, "rememb": [2, 4], "ani": [2, 4, 19, 28, 40, 52, 92, 94], "node": [2, 5, 148, 149], "might": [2, 4, 5], "throw": 2, "except": [2, 3, 52, 55, 117, 157, 161], "main": [2, 3, 21], "build": 2, "gradl": 2, "l46": 2, "t0jp24kbhugzttdfdmmm": 2, "own": 2, "system": [2, 4], "But": 2, "do": [2, 4, 15, 37, 58, 120, 141, 153], "coupl": 2, "allow_registering_model_via_url": 2, "allow_registering_model_via_local_fil": 2, "By": [2, 18, 28, 36, 40, 58, 67, 85, 152], "default": [2, 9, 10, 11, 18, 19, 20, 21, 23, 24, 27, 28, 31, 32, 33, 34, 35, 40, 42, 44, 48, 49, 50, 57, 58, 67, 81, 92, 94, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 146, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163], "raw": 2, "src": 2, "resourc": 2, "l6": [2, 5, 146, 150, 169], "v2_torchscript_sent": 2, "torchscript": [2, 169], "extens": [2, 158, 159], "token": [2, 4, 5, 158, 159, 161, 162, 163], "refer": [2, 4, 5, 8, 14, 59, 61, 141, 146, 147, 150, 151], "defin": [2, 148, 149], "inform": [2, 7, 14, 26, 61, 138, 139, 143, 144], "volum": [2, 5], "workplac": [2, 5], "upload_cont": [2, 5], "transformers_al": 2, "v2_torchscript": 2, "bert": [2, 5, 146, 150], "384": [2, 146, 150], "sentence_transform": [2, 4, 5, 146, 150], "3ead6e8725322ff54ef9137c453132046098d7e6494945283b8fc980c9123675": 2, "4oh9sygbfp6ijxcclpx2": 2, "deploi": [2, 4, 6, 144, 145, 146, 147, 150, 151, 166], "last": [2, 4, 7, 50], "memori": [2, 3, 4, 5, 8, 9, 26, 53, 56, 58, 115, 152, 162], "load_model_output": 2, "uejr24kbhugzttdfnskv": 2, "3w2aohubrmmwmvfoggw8jw": 2, "1691611772437": 2, "1691611774664": 2, "task_info": 2, "get_task_info": [2, 144, 168], "With": [2, 5, 28], "pull": 2, "about": [2, 4, 5, 7, 26, 40, 92, 138, 139, 143, 144], "metadata": [2, 146, 150], "model_info": 2, "134568911": 2, "f8012a4e6b5da1f556221a12160d080157039f077ab85a5f6b467a47247aad49": 2, "all_config": [2, 156], "34": [2, 3, 7, 35, 81, 111, 112], "_name_or_path": 2, "microsoft": 2, "h384": 2, "uncas": 2, "attention_probs_dropout_prob": 2, "gradient_checkpoint": 2, "hidden_act": 2, "gelu": 2, "hidden_dropout_prob": 2, "hidden_s": 2, "initializer_rang": 2, "02": [2, 3, 9, 10, 11, 20, 31, 35, 39, 42, 81, 94, 128, 129], "intermediate_s": 2, "1536": 2, "layer_norm_ep": 2, "1e": [2, 4], "max_position_embed": 2, "num_attention_head": 2, "num_hidden_lay": 2, "pad_token_id": 2, "position_embedding_typ": 2, "absolut": [2, 75, 127, 130], "transformers_vers": 2, "type_vocab_s": 2, "use_cach": 2, "vocab_s": 2, "30522": 2, "1691611630758": 2, "last_registered_tim": 2, "1691611634683": 2, "input_sent": [2, 4], "sentence1": 2, "sentence2": 2, "embedding_output": 2, "generate_embed": [2, 4, 142, 168], "sentence_embed": 2, "data_typ": [2, 142], "float32": 2, "07004598": 2, "094030194": 2, "0294691": 2, "0063353553": 2, "037177887": 2, "003469634": 2, "06973778": 2, "041374724": 2, "052779537": 2, "019993527": 2, "049499035": 2, "044301376": 2, "050956327": 2, "091860786": 2, "039252494": 2, "028518932": 2, "018059155": 2, "09713085": 2, "034800865": 2, "04408874": 2, "025124485": 2, "06829839": 2, "02107054": 2, "073358156": 2, "016343018": 2, "016885223": 2, "0073822327": 2, "069800906": 2, "01917283": 2, "127567": 2, "002833644": 2, "07662087": 2, "010953967": 2, "040559784": 2, "047134362": 2, "02965514": 2, "025424507": 2, "023706196": 2, "015665805": 2, "0002845036": 2, "02252695": 2, "073676944": 2, "05547299": 2, "018682828": 2, "03940338": 2, "024852037": 2, "04160006": 2, "0012200836": 2, "012104877": 2, "05119714": 2, "07446669": 2, "055452716": 2, "007486106": 2, "019089257": 2, "030097323": 2, "026060726": 2, "052988816": 2, "06712463": 2, "025931384": 2, "02644008": 2, "0065706596": 2, "05588654": 2, "05347465": 2, "007984704": 2, "08091787": 2, "036647186": 2, "031903736": 2, "07397383": 2, "0065454575": 2, "034760114": 2, "009686786": 2, "016051935": 2, "04783923": 2, "0035186426": 2, "652851e": 2, "05": [2, 3, 4, 9, 20, 128, 131, 135, 152, 161, 162], "037315175": 2, "0050969664": 2, "0046331156": 2, "048319556": 2, "037194334": 2, "018304864": 2, "06406543": 2, "007127524": 2, "0036731854": 2, "037867695": 2, "052579854": 2, "02275424": 2, "009397553": 2, "078870915": 2, "04558915": 2, "02658195": 2, "07401964": 2, "0022031788": 2, "027502479": 2, "046129823": 2, "028674513": 2, "028122796": 2, "06055296": 2, "046777423": 2, "198897": 2, "02673153": 2, "007961458": 2, "06408687": 2, "03999538": 2, "06574333": 2, "010389742": 2, "031175155": 2, "0015405632": 2, "040537335": 2, "0026587504": 2, "020172479": 2, "08372859": 2, "0058846273": 2, "032710858": 2, "0015732804": 2, "09610316": 2, "0023569933": 2, "05984071": 2, "16500352": 2, "03679231": 2, "122917764": 2, "0018065565": 2, "043636024": 2, "041891094": 2, "009408743": 2, "08278275": 2, "12746939": 2, "016939186": 2, "012635989": 2, "14616504": 2, "051131263": 2, "0033628803": 2, "022748744": 2, "022569718": 2, "037459765": 2, "018744126": 2, "0062177675": 2, "08469717": 2, "006795277": 2, "05414359": 2, "0573888": 2, "047126096": 2, "01614229": 2, "047543816": 2, "062171623": 2, "012241133": 2, "08141003": 2, "011919791": 2, "016868353": 2, "013309039": 2, "065954946": 2, "027840674": 2, "013731638": 2, "057872113": 2, "026792012": 2, "018663734": 2, "05059098": 2, "020403482": 2, "047714923": 2, "01606342": 2, "10401474": 2, "13376766": 2, "03058641": 2, "001033993": 2, "070359856": 2, "013292278": 2, "015457728": 2, "04892655": 2, "011410854": 2, "052058097": 2, "18224768": 2, "0035982134": 2, "022464214": 2, "0030590647": 2, "019338032": 2, "00026649763": 2, "02233567": 2, "07469185": 2, "02382241": 2, "010466962": 2, "03009085": 2, "006465027": 2, "051522672": 2, "0199809": 2, "03548726": 2, "0103704315": 2, "08818128": 2, "02829264": 2, "074272595": 2, "084029905": 2, "035817306": 2, "018850243": 2, "031453986": 2, "068550915": 2, "014118737": 2, "070071295": 2, "008944256": 2, "018165134": 2, "07784688": 2, "070696145": 2, "012862558": 2, "015138121": 2, "0334761": 2, "0068311137": 2, "002638576": 2, "03638613": 2, "03143706": 2, "08959043": 2, "053561207": 2, "08690697": 2, "014789994": 2, "055373095": 2, "11275849": 2, "038676355": 2, "01777756": 2, "062403727": 2, "0830996": 2, "058959745": 2, "021466918": 2, "005259635": 2, "039675698": 2, "07005095": 2, "053564843": 2, "1060878e": 2, "32": [2, 3, 5, 7, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 161, 162], "0013608016": 2, "106175035": 2, "059511874": 2, "0037960887": 2, "013185141": 2, "046274804": 2, "10418073": 2, "0012341124": 2, "013150821": 2, "018092388": 2, "005424653": 2, "014040968": 2, "03679144": 2, "016286962": 2, "09607988": 2, "015155191": 2, "023281407": 2, "08310539": 2, "0006558546": 2, "0002872544": 2, "049073823": 2, "050753288": 2, "0048564966": 2, "08584042": 2, "049346182": 2, "010288551": 2, "087672256": 2, "06680062": 2, "027301554": 2, "060317975": 2, "08574496": 2, "0017309932": 2, "0041642035": 2, "13996643": 2, "0064810454": 2, "06346753": 2, "10613796": 2, "06602093": 2, "007606491": 2, "034102246": 2, "015871532": 2, "034030363": 2, "0662087": 2, "061993726": 2, "016627997": 2, "001729985": 2, "025229797": 2, "003180745": 2, "0490112": 2, "00089509884": 2, "039893012": 2, "0016668896": 2, "012777804": 2, "015382689": 2, "016362777": 2, "02404702": 2, "02143441": 2, "0911707": 2, "053739283": 2, "018560594": 2, "023284977": 2, "0031981992": 2, "0031510598": 2, "10734427": 2, "06998925": 2, "0027732535": 2, "053055596": 2, "02354699": 2, "025985928": 2, "035036538": 2, "058912467": 2, "02920474": 2, "008312963": 2, "056485146": 2, "014061096": 2, "04225053": 2, "08007323": 2, "009161725": 2, "018469293": 2, "045568734": 2, "015968522": 2, "014121509": 2, "0036195314": 2, "027108373": 2, "035869084": 2, "017504305": 2, "108702846": 2, "008362452": 2, "014823476": 2, "04874034": 2, "010967371": 2, "018752342": 2, "046599716": 2, "058064498": 2, "029174827": 2, "6263152e": 2, "33": [2, 3, 7, 9, 92, 128, 129, 152], "030307822": 2, "06679234": 2, "0005264218": 2, "045648467": 2, "10910713": 2, "016406672": 2, "0065098666": 2, "1690238": 2, "011055945": 2, "036133047": 2, "050960947": 2, "028546333": 2, "07644701": 2, "082524374": 2, "041281033": 2, "0342127": 2, "0013897946": 2, "0062635383": 2, "045143634": 2, "017067816": 2, "079229176": 2, "022634152": 2, "068493344": 2, "007873755": 2, "030855201": 2, "03661335": 2, "0154381255": 2, "041089326": 2, "05730516": 2, "063175276": 2, "08143365": 2, "07131981": 2, "03726474": 2, "058889214": 2, "049804606": 2, "03410345": 2, "066488594": 2, "014449714": 2, "022788277": 2, "035716787": 2, "035706382": 2, "046074968": 2, "005366466": 2, "0248586": 2, "025428172": 2, "010590827": 2, "0405528": 2, "065138645": 2, "00039351193": 2, "05637292": 2, "0514825": 2, "0112641435": 2, "066459976": 2, "026653022": 2, "07176415": 2, "0355379": 2, "032872733": 2, "0017282534": 2, "07933759": 2, "04971213": 2, "066491455": 2, "06070366": 2, "012733777": 2, "006001069": 2, "07083512": 2, "09897267": 2, "02352888": 2, "015548294": 2, "034146227": 2, "0247732": 2, "06027314": 2, "028832998": 2, "09044973": 2, "029630564": 2, "044647824": 2, "020695595": 2, "045139927": 2, "105178796": 2, "035747953": 2, "022011546": 2, "022424795": 2, "06875172": 2, "04150383": 2, "046235885": 2, "02588881": 2, "058203597": 2, "03171956": 2, "06430214": 2, "030310709": 2, "027002905": 2, "0028196378": 2, "044340268": 2, "032432683": 2, "11670582": 2, "014379533": 2, "0643216": 2, "011770836": 2, "032793343": 2, "04387401": 2, "038692914": 2, "013582456": 2, "026226604": 2, "007600631": 2, "027217109": 2, "03441963": 2, "08012474": 2, "054726355": 2, "0074604494": 2, "04748688": 2, "025225094": 2, "03748238": 2, "0020973468": 2, "0042126784": 2, "05753656": 2, "08447185": 2, "043337557": 2, "014264312": 2, "023134159": 2, "02947989": 2, "033630386": 2, "05907903": 2, "06964187": 2, "03533768": 2, "022372045": 2, "021929925": 2, "06226919": 2, "030993978": 2, "007610613": 2, "07694968": 2, "017912386": 2, "044359725": 2, "05673219": 2, "01552571": 2, "032636717": 2, "009579155": 2, "018426916": 2, "05479158": 2, "008909622": 2, "006345299": 2, "031336434": 2, "0058207866": 2, "008221157": 2, "058385894": 2, "047120895": 2, "005223671": 2, "06515576": 2, "0010108105": 2, "020413512": 2, "041749343": 2, "044107605": 2, "008662969": 2, "011051096": 2, "08871866": 2, "045078132": 2, "036184326": 2, "07195323": 2, "009203147": 2, "023508985": 2, "028275412": 2, "028231055": 2, "0039115297": 2, "07011834": 2, "05857326": 2, "20727783": 2, "04835618": 2, "0018830771": 2, "06611541": 2, "022906005": 2, "061623234": 2, "02123788": 2, "018174635": 2, "0050362577": 2, "023906214": 2, "0023879737": 2, "035721574": 2, "10048731": 2, "007958884": 2, "044000242": 2, "010386637": 2, "09361921": 2, "011654652": 2, "06738685": 2, "17360488": 2, "032549746": 2, "13699506": 2, "009299514": 2, "048183367": 2, "05021916": 2, "005542932": 2, "10294828": 2, "10766478": 2, "015173303": 2, "01355476": 2, "1350117": 2, "045765016": 2, "021902222": 2, "033359498": 2, "028230252": 2, "04085572": 2, "007747412": 2, "036401898": 2, "092795655": 2, "00096510054": 2, "059694264": 2, "03562055": 2, "037294004": 2, "0015283314": 2, "034953013": 2, "048806172": 2, "0059092273": 2, "060103502": 2, "00898931": 2, "022295611": 2, "022184547": 2, "049791194": 2, "049196154": 2, "037901234": 2, "053590365": 2, "007701697": 2, "0031885458": 2, "056628704": 2, "027927952": 2, "060124114": 2, "025649505": 2, "09657915": 2, "12991673": 2, "03208177": 2, "006092552": 2, "06273655": 2, "025575202": 2, "0069704982": 2, "0503692": 2, "025092859": 2, "019693008": 2, "17965682": 2, "0066510485": 2, "024963824": 2, "018071467": 2, "016473666": 2, "008775544": 2, "049499284": 2, "07836955": 2, "032525778": 2, "007377622": 2, "03200582": 2, "011032107": 2, "028064458": 2, "017632844": 2, "026994104": 2, "008085599": 2, "07062725": 2, "03446164": 2, "050107572": 2, "09331023": 2, "049584396": 2, "021610705": 2, "027137293": 2, "07193105": 2, "013025723": 2, "07407565": 2, "02058441": 2, "011435531": 2, "10216389": 2, "066884704": 2, "019413384": 2, "0076031317": 2, "036991768": 2, "0303734": 2, "0014173611": 2, "033982154": 2, "028674075": 2, "080678694": 2, "0375031": 2, "08438446": 2, "0010728774": 2, "05789914": 2, "113598056": 2, "018308552": 2, "011551412": 2, "07234886": 2, "09252421": 2, "04969506": 2, "014780675": 2, "007567542": 2, "044519085": 2, "06133406": 2, "05895338": 2, "414509e": 2, "009771958": 2, "12160779": 2, "039359365": 2, "010013683": 2, "00898449": 2, "04882902": 2, "092219874": 2, "0024215167": 2, "008333214": 2, "03851627": 2, "012913563": 2, "03204204": 2, "041664835": 2, "0009534093": 2, "10857273": 2, "024132818": 2, "021791773": 2, "101970024": 2, "009454601": 2, "026551446": 2, "05246786": 2, "06066872": 2, "01103198": 2, "08555519": 2, "048329007": 2, "015530085": 2, "08154496": 2, "0731774": 2, "024714865": 2, "05487307": 2, "07664423": 2, "009958633": 2, "012626225": 2, "12942669": 2, "02095135": 2, "071839556": 2, "112829536": 2, "05635947": 2, "009640948": 2, "04163078": 2, "037358176": 2, "029693598": 2, "0628964": 2, "053272255": 2, "012749352": 2, "009228823": 2, "01942351": 2, "004775929": 2, "036169015": 2, "012142286": 2, "01922596": 2, "9331225e": 2, "026529552": 2, "012205288": 2, "017824046": 2, "015235645": 2, "0181183": 2, "08875225": 2, "03372447": 2, "020540629": 2, "005065464": 2, "0013711171": 2, "00086961745": 2, "11509084": 2, "06752553": 2, "0014781557": 2, "05162722": 2, "024478994": 2, "027465401": 2, "04733123": 2, "07152838": 2, "033279166": 2, "007459171": 2, "05876381": 2, "040509865": 2, "023988906": 2, "08772608": 2, "003155819": 2, "020018948": 2, "041812915": 2, "0050884616": 2, "013900808": 2, "02811133": 2, "021810783": 2, "013438155": 2, "007385124": 2, "10051118": 2, "014426816": 2, "004692878": 2, "03919732": 2, "0023597397": 2, "015907336": 2, "035865597": 2, "071099125": 2, "013097632": 2, "3765136e": 2, "022041548": 2, "06963561": 2, "022240805": 2, "037175175": 2, "09121253": 2, "009112657": 2, "014528283": 2, "1540716": 2, "005560708": 2, "024977792": 2, "052556057": 2, "014630056": 2, "088896446": 2, "09537804": 2, "039953273": 2, "042290684": 2, "024341425": 2, "0096786395": 2, "04815927": 2, "03606919": 2, "05914406": 2, "009443069": 2, "06272632": 2, "0018664851": 2, "004131947": 2, "039284766": 2, "014626883": 2, "025103891": 2, "053130243": 2, "05443761": 2, "07312244": 2, "059003882": 2, "03820951": 2, "08526913": 2, "06061701": 2, "04227627": 2, "06129878": 2, "016126666": 2, "0364838": 2, "026359634": 2, "020908944": 2, "048757017": 2, "004610902": 2, "035508078": 2, "02846824": 2, "009864912": 2, "034235265": 2, "07203998": 2, "0005532816": 2, "054544747": 2, "042482726": 2, "014105883": 2, "081946984": 2, "040557213": 2, "06266559": 2, "04084731": 2, "02860638": 2, "025837963": 2, "077221215": 2, "039314423": 2, "049470052": 2, "05854972": 2, "032445546": 2, "024784891": 2, "after": [2, 4, 5, 59, 153, 154], "want": [2, 4, 144, 169], "unload_model": [2, 149, 168], "method": [2, 3, 4, 7, 22, 26, 37, 54, 123, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 166], "node_id": [2, 148, 149], "undeploy_model_respons": 2, "undeploy_model": [2, 148, 149, 168], "stat": [2, 166], "undeploi": [2, 149, 166], "delete_model_respons": 2, "delete_model": [2, 138, 168], "_index": [2, 122], "_id": [2, 3, 7, 9, 25, 39, 58, 71, 122, 153], "_version": 2, "result": [2, 3, 4, 5, 7, 26, 43, 61, 142, 156], "_shard": [2, 122], "success": [2, 122], "fail": [2, 3, 122, 153], "_seq_no": 2, "11203": 2, "_primary_term": 2, "2": [3, 7, 9, 10, 11, 13, 15, 19, 20, 21, 26, 27, 28, 30, 32, 35, 36, 41, 42, 50, 53, 59, 60, 62, 63, 68, 80, 81, 82, 83, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 111, 112, 115, 118, 122, 127, 129, 130, 132, 133, 134, 135, 141, 145, 149, 150, 151, 152, 153, 158, 159, 163], "3": [3, 7, 9, 15, 19, 20, 21, 22, 27, 28, 33, 35, 41, 42, 49, 53, 57, 59, 60, 62, 63, 68, 70, 80, 81, 82, 83, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 111, 112, 115, 118, 122, 126, 127, 130, 132, 133, 134, 135, 136, 152, 153, 161], "4": [3, 7, 9, 10, 11, 15, 19, 20, 27, 28, 35, 39, 40, 42, 53, 59, 60, 62, 63, 68, 80, 81, 82, 83, 88, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 111, 112, 115, 118, 122, 128, 129, 130, 131, 133, 135, 136, 142, 152, 153, 161], "set": [3, 7, 14, 28, 40, 52, 55, 61, 92, 117, 157, 160, 161], "flight": [3, 9, 10, 11, 12, 14, 16, 17, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 38, 39, 42, 43, 45, 48, 49, 50, 53, 57, 59, 61, 65, 70, 71, 75, 76, 77, 78, 79, 88, 90, 94, 98, 110, 113, 115, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 152], "oml_flight": [3, 20, 23, 24, 42, 94, 133], "type": [3, 7, 14, 15, 16, 19, 21, 26, 37, 38, 40, 50, 53, 61, 65, 89, 90, 115, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163], "pd_flight": 3, "opensearch_to_panda": [3, 53, 56, 115, 153, 165], "frame": [3, 7, 53, 152, 153], "avgticketpric": [3, 9, 10, 11, 12, 14, 16, 20, 23, 24, 27, 28, 30, 31, 32, 33, 34, 38, 42, 45, 48, 49, 53, 57, 61, 65, 75, 76, 77, 78, 79, 90, 110, 113, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 152], "cancel": [3, 9, 12, 20, 27, 28, 30, 31, 32, 33, 34, 45, 48, 49, 57, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 152], "carrier": [3, 12, 19, 25, 53, 59, 71, 88, 98, 115, 120], "dest": [3, 12, 21, 45, 50], "destairportid": [3, 12, 39], "destcitynam": [3, 12], "destcountri": [3, 10, 11, 12, 20, 30, 31, 32, 33, 34, 48, 49, 57, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136], "destloc": [3, 12], "destregion": [3, 12], "destweath": [3, 12], "distancekilomet": [3, 10, 11, 12], "distancemil": [3, 12], "flightdelai": [3, 12], "flightdelaymin": [3, 12, 14, 23, 24, 39, 42, 43, 133], "flightdelaytyp": [3, 12], "flightnum": [3, 12], "flighttimehour": [3, 12], "flighttimemin": [3, 12, 70], "origin": [3, 12, 16, 21, 38, 50, 65, 90], "originairportid": [3, 12, 39], "origincitynam": [3, 12], "origincountri": [3, 12], "originloc": [3, 12], "originregion": [3, 12], "originweath": [3, 12, 70], "dayofweek": [3, 9, 12, 16, 20, 23, 24, 30, 31, 32, 33, 34, 38, 42, 45, 48, 49, 57, 65, 90, 94, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 152], "float64": [3, 7, 10, 11, 16, 30, 31, 32, 33, 34, 42, 45, 48, 49, 57, 60, 61, 62, 63, 65, 68, 80, 82, 83, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 111, 112, 118, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 153], "bool": [3, 7, 10, 11, 17, 20, 26, 28, 30, 31, 32, 33, 34, 35, 39, 40, 41, 42, 45, 48, 49, 54, 57, 73, 74, 75, 76, 77, 78, 79, 86, 87, 92, 110, 113, 116, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 134, 135, 136, 140, 144, 145, 146, 147, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163], "int64": [3, 7, 13, 16, 37, 39, 45, 60, 62, 63, 65, 68, 80, 82, 83, 93, 103, 111, 112, 118, 120, 153], "datetime64": [3, 16, 39, 45, 65, 81, 94, 153], "n": [3, 7, 13, 16, 21, 39, 44, 45, 50, 65, 69, 81, 94, 107, 114, 153], "27": [3, 4, 7, 9, 20, 43, 94, 122, 128, 130, 131, 152], "841": [3, 9, 27, 28, 53, 152], "265642": [3, 9, 27, 28, 53, 152], "16492": 3, "326654": 3, "1030": 3, "770416": 3, "882": [3, 9, 27, 28, 53, 152], "982662": [3, 9, 27, 28, 53, 152], "8823": 3, "400140": 3, "464": [3, 7], "389481": 3, "190": [3, 9, 27, 28, 53, 152], "636904": [3, 9, 27, 28, 53, 152], "000000": [3, 7, 14, 20, 30, 31, 33, 34, 42, 61], "181": [3, 9, 27, 28, 53, 152], "694216": [3, 9, 27, 28, 53, 152], "555": 3, "737767": 3, "222": 3, "749059": 3, "730": [3, 9, 27, 28, 53, 152], "041778": [3, 9, 27, 28, 53, 152], "13358": 3, "244200": 3, "785": 3, "779071": 3, "13054": [3, 19, 50, 59, 98], "1080": 3, "446279": 3, "8058": 3, "581753": 3, "402": 3, "929088": 3, "13055": [3, 19, 50, 59, 98], "646": [3, 129], "612941": 3, "7088": 3, "598322": 3, "644": 3, "418029": 3, "13056": [3, 19, 50, 59, 98], "997": 3, "751876": 3, "10920": 3, "652972": 3, "937": 3, "540811": 3, "13057": [3, 19, 50, 59, 98], "1102": 3, "814465": 3, "18748": 3, "859647": 3, "1697": 3, "404971": 3, "13058": [3, 19, 50, 59, 98], "858": 3, "144337": 3, "16809": 3, "141923": 3, "1610": 3, "761827": 3, "13059": [3, 14, 19, 43, 59, 61, 98, 152], "note": [3, 5, 14, 25, 37, 61, 71, 119, 120, 152], "doe": [3, 5, 18, 67, 98, 122, 153], "mirror": [3, 9], "21": [3, 4, 7, 32, 33, 35, 42, 81, 94, 122, 128, 129, 130], "13049": 3, "13050": 3, "13051": 3, "13052": 3, "13053": 3, "nbval_ignore_output": [3, 7], "0x1131744c0": 3, "os_index_field": [3, 7, 9, 25, 39, 58, 59, 71], "25": [3, 4, 7, 20, 22, 39, 41, 70, 122], "2656419677076": [3, 28, 53], "kibana": [3, 19, 53, 59, 98, 115, 120], "airlin": [3, 19, 53, 59, 98, 115, 120], "sunni": [3, 70, 159], "2018": [3, 9, 10, 11, 20, 31, 32, 33, 34, 39, 42, 94, 128, 129, 130, 131, 152], "01": [3, 5, 7, 9, 10, 11, 20, 32, 33, 34, 39, 42, 94, 122, 128, 129, 130, 131, 152], "00": [3, 7, 9, 10, 11, 20, 34, 35, 39, 81, 94, 128, 131, 152], "9826615595518": [3, 28, 53], "logstash": [3, 19, 53, 59, 98, 115, 120], "airwai": [3, 19, 53, 59, 98, 115, 120], "clear": 3, "6369038508356": [3, 28, 53], "rain": 3, "7518761454494": 3, "04": [3, 20, 35, 42, 49, 81, 94, 128, 129, 130, 131, 135], "09": [3, 20, 35, 39, 42, 81, 94, 128, 130, 131], "8144645388556": 3, "jetbeat": [3, 19, 59, 98, 120], "hail": 3, "08": [3, 7, 20, 35, 39, 81, 128, 131], "28": [3, 7, 9, 122, 129, 152], "1443369038839": 3, "54": [3, 33, 60, 92, 94, 95, 129, 135], "26": [3, 4, 7, 62, 63, 68, 118, 122], "try": [3, 37], "attributeerror": 3, "e": [3, 5, 9, 10, 11, 13, 120, 122, 141, 153, 158, 159], "would": [3, 4, 5, 53, 56, 115], "scan": [3, 53, 56, 115], "scroll": [3, 53, 56, 115], "entir": [3, 7, 52, 53, 55, 56, 115, 117, 152], "explicitli": [3, 52, 55, 117], "suffici": 3, "call": [3, 4, 5, 10, 11, 22, 53, 56, 98, 115, 122, 153], "ed": 3, "ed_df": 3, "29": [3, 7, 128, 152], "41": [3, 39, 122], "57": [3, 42, 94, 130], "31": [3, 7, 9, 20, 128, 131], "35": [3, 7, 20, 104, 105, 130], "frankfurt": [3, 21], "am": [3, 21, 39], "airport": [3, 21, 50], "cape": [3, 21], "town": [3, 21], "intern": [3, 4, 21, 39, 50, 122], "venic": [3, 21], "marco": [3, 5, 21], "polo": [3, 21], "napl": 3, "licenciado": [3, 50], "benito": [3, 50], "juarez": [3, 50], "pisa": [3, 50], "winnipeg": [3, 50], "jame": [3, 50], "armstrong": [3, 50], "richardson": [3, 50], "internat": 3, "itami": [3, 50], "adelaid": [3, 50], "current": [3, 5, 9, 10, 11, 14, 20, 31, 32, 34, 41, 49, 58, 61, 76, 77, 78, 79, 113, 122, 154, 157, 161, 163], "36": [3, 7, 9, 20, 35, 60, 62, 63, 68, 80, 81, 82, 83, 93, 95, 96, 97, 99, 100, 101, 102, 104, 105, 106, 111, 112, 118, 152], "typeerror": 3, "unhash": 3, "37": [3, 20, 60, 95, 152], "900": 3, "960": 3, "869736": 3, "975": 3, "812632": 3, "38": [3, 7, 35, 60, 81, 131, 135], "311": 3, "946": 3, "358410": 3, "51": [3, 9, 42, 111, 112, 131], "651": 3, "383864": 3, "03": [3, 4, 10, 11, 20, 49, 128, 135], "950": [3, 7], "907": 3, "836523": 3, "12820": 3, "909": 3, "973606": 3, "12906": 3, "983": 3, "429244": 3, "06": [3, 7, 9, 10, 11, 20, 33, 35, 49, 81, 128, 129, 131, 135], "58": [3, 35, 81, 129], "12918": 3, "1136": 3, "678150": 3, "12919": 3, "1105": 3, "211803": 3, "13013": 3, "1055": 3, "350213": 3, "68": [3, 122], "qualifi": 3, "aggreg": [3, 10, 13, 37, 58, 120, 124, 164], "std": [3, 7, 10, 11, 14, 30, 61, 164, 171], "261629e": [3, 10, 11], "07": [3, 7, 10, 11, 122, 129], "204365e": [3, 10, 11, 49], "000000e": [3, 10, 11], "000205e": [3, 10, 11], "578438e": 3, "663969e": 3, "numer": [3, 7, 14, 30, 31, 32, 33, 34, 35, 37, 48, 49, 57, 61, 76, 77, 78, 79, 113, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136], "43": [3, 42, 152], "578614e": [3, 10, 11], "664071e": [3, 10, 11], "45": [3, 7, 32, 40, 46, 122, 128, 131, 135], "46": [3, 7, 35, 37, 42, 81, 126, 130, 132], "628": [3, 14, 32, 61, 77], "253689": [3, 14, 32, 61], "7092": 3, "142455": 3, "511": 3, "127842": 3, "835975": [3, 32], "266": [3, 10, 11, 14, 48, 61, 92, 110], "396861": 3, "4578": [3, 10, 11], "438497": 3, "334": 3, "753952": 3, "939439": 3, "100": [3, 7, 10, 11, 14, 20, 34, 61, 79, 100, 124, 125, 131], "020528": 3, "409": 3, "893816": 3, "2459": 3, "705673": 3, "252": 3, "333192": 3, "50": [3, 7, 31, 42, 94, 130], "640": [3, 33, 42, 78], "556668": 3, "7610": 3, "330866": 3, "503": 3, "045170": 3, "75": [3, 7, 42, 94, 122], "842": [3, 42], "185470": 3, "9736": 3, "637600": 3, "720": 3, "416036": 3, "1199": [3, 14, 20, 31, 61, 76, 124, 125, 128], "729053": 3, "19881": 3, "482315": 3, "1902": 3, "902032": 3, "mai": [3, 122, 153, 164], "vari": [3, 14, 61], "due": 3, "47": [3, 14, 20, 122, 129, 131], "128494": [3, 32], "407061": [3, 48], "334664": [3, 48], "766770": 3, "939513": [3, 48], "020531": [3, 14, 20, 34, 61, 124, 125, 131], "410": 3, "008918": 3, "251": [3, 20, 134], "938710": 3, "387285": [3, 42], "148975": 3, "213490": [3, 42], "505705": 3, "729004": [3, 14, 20, 31, 61, 124, 125, 128], "901978": 3, "48": [3, 94, 129, 130], "class": [3, 9, 26, 52, 53, 58, 59, 115, 123, 152, 153, 154, 159, 166], "entri": [3, 26], "null": [3, 23, 24, 26], "usag": [3, 22, 26, 70], "mb": 3, "49": 3, "64": [3, 122], "000": [3, 5, 7, 130], "byte": [3, 38, 90], "storag": [3, 26], "714": 3, "numeric_onli": [3, 10, 11, 20, 30, 31, 32, 33, 34, 35, 42, 48, 49, 57, 75, 76, 77, 78, 79, 110, 113, 121, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136], "12353": 3, "780369": 3, "360": [3, 14, 39], "715034": 3, "482422": 3, "780273": 3, "52": [3, 39, 104, 105], "53": [3, 35, 39, 60, 62, 63, 68, 80, 81, 82, 83, 93, 95, 96, 97, 99, 100, 101, 102, 104, 105, 106, 111, 112, 118, 130], "4406": 3, "853013": 3, "251168": 3, "335171": [3, 14], "518797": 3, "55": [3, 7, 41, 42, 60, 129], "142457": 3, "853010": 3, "56": [3, 122, 129, 130], "678000e": [3, 49], "754909e": 3, "280000e": 3, "181500e": 3, "112470e": 3, "674818e": 3, "703500e": [3, 49], "nuniqu": [3, 7, 126, 164, 171], "156": 3, "59": [3, 94, 128], "60": [3, 39, 43, 52, 55, 117], "se": [3, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136], "bd": 3, "IT": 3, "ch": 3, "zh": 3, "ru": [3, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136], "amu": 3, "dc": 3, "61": [3, 122], "62": [3, 122], "hist": [3, 7, 164, 171], "63": [3, 20], "oml_flights2": 3, "65": [3, 5, 7], "os_info": [3, 7, 164, 171], "os_index_pattern": [3, 7, 9, 39, 59], "is_source_field": [3, 7, 39], "map": [3, 4, 7, 16, 37, 39, 46, 59, 65, 122, 153], "capabl": [3, 7, 8, 39], "os_field_nam": [3, 7, 39], "is_sourc": [3, 7, 39], "os_dtyp": [3, 7, 39, 164, 171], "os_date_format": [3, 7, 39], "pd_dtype": [3, 7, 39], "is_search": [3, 7, 39], "is_aggregat": [3, 7, 39], "is_script": [3, 7, 39], "aggregatable_os_field_nam": [3, 7, 39], "date": [3, 8, 38, 39, 90], "strict_date_hour_minute_second": [3, 39], "keyword": [3, 7, 10, 11, 13, 37, 38, 39, 40, 90, 92, 120, 153], "integ": [3, 5, 39, 68, 99], "task": [3, 4, 5, 7, 39, 166], "boolean_filt": [3, 7, 39], "term": [3, 7, 39, 120, 161], "sort_field": [3, 7, 39], "_doc": [3, 7, 27, 28, 39], "size": [3, 5, 7, 9, 39, 122, 161, 162, 164, 171], "sort_param": [3, 7, 39], "desc": [3, 7, 39], "_sourc": [3, 7, 39, 122], "post_process": [3, 7, 39], "sort_index": [3, 7, 27, 28, 39], "custom": [4, 5, 28, 122, 154, 161, 162, 163], "just": 4, "wai": 4, "compar": [4, 25, 71], "o": [4, 59, 122, 153], "sy": 4, "path": [4, 5, 146, 150, 154, 156, 157, 158, 159, 161, 163], "append": [4, 5, 122, 153], "abspath": 4, "join": 4, "futurewarn": 4, "tracerwarn": 4, "ml_model": [4, 5, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163], "sentencetransformermodel": [4, 5, 154, 170], "mlcommon": [4, 5, 6, 8, 166], "later": [4, 5, 7], "tqdm": [4, 5], "auto": 4, "tqdmwarn": 4, "iprogress": 4, "jupyt": 4, "ipywidget": 4, "readthedoc": 4, "io": [4, 166], "en": 4, "stabl": 4, "user_instal": 4, "html": [4, 52], "autonotebook": 4, "notebook_tqdm": 4, "save_as_pt": [4, 156, 170], "filesystem": 4, "msmarco": [4, 154, 156, 158, 159, 162, 169], "distilbert": [4, 154, 156, 158, 159, 162, 169], "ta": [4, 154, 156, 158, 159, 162, 169], "b": [4, 5, 122, 153, 154, 156, 158, 159, 162, 169], "string": [4, 7, 10, 11, 40, 92, 117, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 158, 159, 160, 161, 162, 163], "direct": 4, "folder_path": [4, 5, 154], "pre_trained_model": 4, "overwrit": [4, 5, 153, 154, 157, 161], "small": [4, 5], "modeling_distilbert": 4, "223": 4, "constant": 4, "safe": 4, "function": [4, 8, 10, 11, 21, 40, 50, 92, 124, 125, 154, 166], "out": [4, 5, 26, 120], "variabl": [4, 5], "caus": [4, 122, 153], "incorrect": [4, 26, 41], "mask": [4, 73, 74, 86, 87], "finfo": 4, "score": [4, 5], "dtype": [4, 7, 12, 13, 19, 23, 24, 26, 27, 30, 31, 32, 33, 34, 37, 38, 42, 45, 48, 49, 53, 57, 59, 60, 61, 62, 63, 68, 80, 81, 82, 83, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 111, 112, 115, 117, 118, 120, 122, 127, 128, 129, 130, 131, 132, 134, 135, 136, 153, 164, 171], "min": [4, 7, 10, 11, 14, 20, 61, 124, 125, 164, 171], "help": [4, 5], "make_model_config_json": [4, 5, 170], "commons_model_config": [4, 5, 156], "folder": [4, 5, 154, 156, 157, 161], "yourself": 4, "descript": [4, 14, 61, 156, 166], "paragraph": 4, "768": 4, "dimension": [4, 9, 46, 108], "dens": 4, "vector": [4, 7], "space": [4, 5], "optim": [4, 5], "semant": [4, 5, 162], "either": [4, 10, 11, 18, 67, 157, 161], "approach": [4, 13], "so": [4, 5, 58, 59, 146, 147, 150, 151, 153, 164], "model_serving_framework": 4, "text_embedding_model_exampl": 4, "ml_commons_register_api": 4, "integr": 4, "demo_ml_commons_integr": 4, "model_config_path_torch": 4, "b397ae99ef3c27ba2ea080428ba695ba732da90a9367e77383b55ec0b191903": 4, "4djw4okb2ly7dmqct7xp": 4, "4tjw4okb2ly7dmqcervn": 4, "save_as_onnx": [4, 156, 170], "model_path_onnx": 4, "opset": 4, "load": [4, 58, 152, 155, 166], "pipelin": 4, "cu117": 4, "batch": [4, 5, 161, 162], "sequenc": [4, 5, 18, 40, 67], "output_0": 4, "ensur": 4, "correct": [4, 41], "order": [4, 7, 21, 40, 50, 92, 119, 122, 162], "head_mask": 4, "present": 4, "pooling_mod": [4, 156], "cl": 4, "normalize_result": [4, 156], "model_config_path_onnx": 4, "81c950d07eaa21705dd94cec0f127efec42844cd1995502452764777460517d4": 4, "49jz4okb2ly7dmqcnrwd": 4, "5njz4okb2ly7dmqcw7xa": 4, "embedding_output_torch": 4, "data_torch": 4, "embedding_output_onnx": 4, "data_onnx": 4, "signific": [4, 152], "assert_allclos": 4, "rtol": 4, "atol": 4, "techniqu": 5, "obtain": 5, "deep": 5, "built": 5, "power": [5, 8, 93, 103], "shown": 5, "improv": 5, "art": 5, "disciplin": 5, "lot": [5, 26, 58], "Such": 5, "often": 5, "hard": 5, "languag": 5, "circumv": 5, "focu": 5, "retriev": 5, "corpu": 5, "long": [5, 7, 153], "pair": [5, 27, 28], "relev": 5, "absenc": 5, "sqg": [5, 157], "human": 5, "thu": 5, "fact": [5, 161], "beat": 5, "sinc": [5, 7, 145, 149, 150, 151, 161], "specif": [5, 40, 120], "guid": [5, 43], "comput": [5, 42, 94, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 156, 160, 161, 166], "recommend": [5, 8, 154, 157, 161], "gpu": [5, 160, 161, 162], "ec2": 5, "p3": 5, "8xlarg": 5, "16xlarg": 5, "script": [5, 159, 162, 169], "proper": 5, "environ": [5, 160, 161], "urllib": 5, "urlretriev": 5, "artifact": 5, "amazon": 5, "gpt": 5, "gpt2_xl_sqg": 5, "0": [5, 8, 9, 10, 11, 14, 15, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 32, 33, 34, 35, 37, 40, 42, 48, 53, 57, 59, 60, 62, 63, 67, 68, 70, 80, 81, 82, 83, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 111, 112, 115, 118, 122, 124, 125, 127, 129, 131, 133, 134, 135, 136, 145, 149, 150, 151, 152, 153, 158, 159, 161, 162, 163, 169], "httpmessag": 5, "0x10bdbe940": 5, "acceler": [5, 161], "detoxifi": 5, "boto3": 5, "load_dataset": 5, "gc": 5, "cuda": 5, "empty_cach": 5, "myselect": 5, "is_select": 5, "passage_text": 5, "argmax": 5, "There": 5, "jsonl": 5, "index_nam": [5, 52, 55], "purpos": [5, 161], "ms_marco": 5, "v1": [5, 169], "df": [5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 25, 26, 27, 28, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 43, 45, 46, 48, 49, 50, 57, 60, 61, 62, 63, 65, 68, 70, 71, 80, 82, 83, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 111, 112, 118, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136], "from_dict": 5, "valid": [5, 122], "appli": [5, 10, 11, 18, 22, 40, 41, 67], "lambda": 5, "axi": [5, 10, 11, 15, 18, 23, 24, 44, 67], "full": [5, 26, 40, 92], "set_opt": 5, "max_column": 5, "expand_frame_repr": 5, "max_colwidth": 5, "real": 5, "pretend": 5, "sample_passag": 5, "ss": 5, "three_step_queri": 5, "generate_synthetic_queri": 5, "num_machin": [5, 160, 161], "tokenize_data": 5, "tokenizer_max_length": 5, "300": 5, "total_queri": 5, "numseq": 5, "num_gpu": [5, 161, 162], "toxic_cutoff": 5, "tokens_to_word_ratio": 5, "action": 5, "being": [5, 7, 28, 156, 158, 159], "elabor": 5, "them": [5, 162], "form": 5, "consum": 5, "amount": 5, "xl": 5, "gpt2": 5, "special": 5, "startoftext": 5, "qry": 5, "begin": [5, 7], "respect": [5, 7], "process": [5, 160], "subsequ": 5, "5b": 5, "paramet": [5, 7, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 162, 163], "ask": [5, 7], "question": [5, 7], "publicli": 5, "onc": 5, "ideal": [5, 22], "lead": 5, "around": 5, "less": 5, "divisor": 5, "float": [5, 38, 42, 44, 62, 63, 75, 76, 77, 78, 79, 90, 94, 107, 110, 113, 118, 121, 133, 161, 162], "switch": [5, 8], "v": 5, "word": [5, 161, 162], "phase": 5, "most": [5, 162], "split": [5, 26], "200": [5, 60, 92, 95], "ratio": 5, "667": 5, "wikipedia": 5, "domain": 5, "could": [5, 98], "know": 5, "singl": [5, 10, 11, 13, 22, 40, 94], "instanc": [5, 98], "least": 5, "progress": [5, 152, 161, 162], "bar": 5, "per": 5, "empir": 5, "better": 5, "diminish": 5, "infer": [5, 51, 122], "increas": [5, 162], "remov": [5, 15, 28, 31, 32, 33, 34, 42, 48, 49, 57, 122, 127, 128, 129, 130, 131, 132, 134, 135, 136, 153], "inappropri": 5, "reject": 5, "toxic": 5, "greater": 5, "than": [5, 9, 37, 58, 120], "final": 5, "directori": [5, 154, 157, 161], "restart": 5, "kernel": 5, "rerun": 5, "give": [5, 7, 26, 154, 166], "error": [5, 15, 40, 92, 122], "custom_model": 5, "model_fil": [5, 154], "read_queri": [5, 170], "read_path": [5, 157, 161], "clean_synthetic_queri": 5, "initit": 5, "export": [5, 166], "plese": 5, "visit": 5, "synthest": 5, "clean": [5, 157, 161], "cach": [5, 46], "befor": [5, 122, 144, 153], "free": 5, "output_model_nam": [5, 161, 162], "test2_model": 5, "zip_file_nam": [5, 158, 159, 161, 163], "num_epoch": [5, 161, 162], "verbos": [5, 26, 122, 156, 160, 161, 162, 163], "some": [5, 7], "point": [5, 41], "maxim": 5, "dot": [5, 169], "product": [5, 7, 35], "irrelev": 5, "known": 5, "contrast": 5, "neg": 5, "symmetr": 5, "loss": 5, "mention": 5, "util": [5, 8, 54, 166], "send": 5, "randomli": [5, 44], "select": [5, 21, 45, 50, 166], "q": [5, 42, 94, 133], "p": 5, "within": [5, 40, 41, 119, 157], "similarli": 5, "express": [5, 18, 23, 24, 43, 67], "c": [5, 153], "sum_": 5, "log": [5, 7, 156, 160, 162, 163], "frac": [5, 44, 107], "exp": 5, "q_i": 5, "cdot": 5, "p_i": 5, "j": 5, "p_j": 5, "right": [5, 21, 50, 60, 62, 63, 68, 80, 82, 83, 93, 111, 112, 118], "beyond": [5, 162], "shorter": [5, 162], "adjust": 5, "therefor": 5, "allow": [5, 7, 8], "bigger": 5, "percentil": [5, 14, 61, 161, 162], "argument": [5, 9, 10, 11, 14, 31, 32, 34, 37, 40, 43, 49, 61, 76, 77, 78, 79, 92, 113, 117, 120], "devic": 5, "larger": 5, "unfortun": 5, "short": 5, "feel": 5, "experi": 5, "adamw": 5, "epoch": [5, 161, 162], "rate": [5, 161, 162], "2e": [5, 161, 162], "schedul": 5, "linear": 5, "warmup": 5, "pars": [5, 156], "son": 5, "arguument": 5, "upload_model": [5, 150, 168], "prepar": [5, 158, 159, 163], "61fd5a1425960681da49d084dca0e52fd0fabcc0f2e1c4d57c4e20e193bde483": 5, "lgfg9iubto3f8n5r8nm6": 5, "onlin": [6, 8], "retail": [6, 8], "analysi": [6, 8], "sentenc": [6, 8, 142, 156, 158, 159, 161, 162, 166, 169], "cliptextmodel": 6, "metric": [6, 141], "correl": [6, 141], "popul": [7, 43, 153], "csv_to_opensearch": [7, 167], "gz": 7, "os_client": [7, 9, 59, 122, 153], "os_dest_index": [7, 122, 153], "es_if_exist": 7, "replac": [7, 122, 153], "os_dropna": [7, 122, 153], "es_refresh": 7, "index_col": [7, 122], "choos": [7, 154], "subset": [7, 9, 18, 45, 67], "didn": 7, "access": [7, 8, 58], "countri": 7, "customerid": 7, "invoiced": 7, "invoiceno": 7, "quantiti": [7, 98], "stockcod": 7, "unitpric": 7, "offer": 7, "doubl": 7, "attribut": [7, 166], "much": 7, "unit": 7, "kingdom": 7, "17850": 7, "85123a": 7, "71053": 7, "count": [7, 10, 11, 14, 22, 26, 35, 39, 61, 120, 164], "14998": 7, "17419": 7, "21773": 7, "14999": 7, "22149": 7, "specifi": [7, 10, 11, 15, 18, 40, 44, 67, 92, 120], "2010": 7, "filter": [7, 21, 23, 24, 35, 40, 41, 42, 44, 50, 92, 133, 164, 171], "under": [7, 41, 154], "hood": 7, "construct": [7, 9], "directli": [7, 22, 141, 158, 159], "germani": 7, "1109": 7, "12662": 7, "22809": 7, "95": [7, 161, 162], "1110": 7, "84347": 7, "1111": 7, "84945": 7, "85": 7, "1112": 7, "22242": 7, "1113": 7, "22244": 7, "isin": [7, 171], "84406b": 7, "84029g": 7, "84029e": 7, "combin": [7, 10, 11, 92, 124, 125], "further": [7, 146, 147, 150, 151], "90": 7, "translat": [7, 161], "answer": 7, "what": [7, 8, 14, 27, 28, 61], "sum": [7, 10, 11, 164, 171], "111960": 7, "me": 7, "mean": [7, 10, 11, 14, 20, 61, 164, 171], "qunat": 7, "unit_pric": 7, "agg": [7, 11, 20, 164], "61548": 7, "490000": [7, 62, 63, 118], "103233": 7, "2880": 7, "990000": [7, 62, 63, 118], "9360": 7, "10729": 7, "15000": 7, "15590": 7, "776680": 7, "464000": 7, "1764": 7, "189592": 7, "930116": 7, "106214": 7, "12347": 7, "14222": 7, "689466": 7, "250000": 7, "15668": 7, "019608": 7, "510000": 7, "17218": 7, "806604": 7, "472000": 7, "212788": 7, "18239": 7, "histogram": [7, 22, 70], "bin": [7, 22, 70], "13748": 7, "22086": 7, "83": [7, 122], "15291": 7, "21733": 7, "96": [7, 14, 92], "14688": 7, "21212": 7, "102": [7, 20, 124, 125, 131], "85071b": 7, "176": [7, 60], "16029": 7, "85099c": 7, "14784": 7, "15061": 7, "22423": 7, "14785": 7, "22075": 7, "14788": 7, "17038": 7, "14974": 7, "14739": 7, "21704": 7, "72": 7, "14980": 7, "22178": 7, "258": 7, "concaten": [7, 163], "kingdom85123a": 7, "kingdom71053": 7, "kingdom84406b": 7, "kingdom84029g": 7, "kingdom84029": 7, "14995": 7, "kingdom72349b": 7, "14996": 7, "kingdom72741": 7, "14997": 7, "kingdom22762": 7, "kingdom21773": 7, "kingdom22149": 7, "feb": 8, "2024": 8, "1": [8, 9, 10, 11, 15, 18, 19, 21, 22, 23, 24, 26, 27, 28, 31, 35, 37, 41, 42, 44, 48, 49, 53, 59, 60, 62, 63, 67, 68, 80, 81, 82, 83, 85, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 111, 112, 115, 118, 122, 127, 129, 130, 133, 134, 135, 146, 150, 152, 153, 156, 160, 161, 169], "link": [8, 43, 98], "sourc": [8, 9, 11, 13, 15, 18, 19, 20, 21, 23, 24, 26, 27, 28, 29, 35, 39, 40, 41, 42, 43, 44, 45, 50, 51, 52, 53, 54, 55, 58, 59, 61, 67, 69, 72, 73, 75, 76, 77, 78, 79, 81, 86, 88, 91, 92, 94, 98, 107, 110, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 152], "repositori": 8, "client": [8, 9, 59, 122, 153], "explor": 8, "analyz": [8, 14, 40, 61, 92], "familiar": 8, "compat": [8, 45], "possibl": [8, 9, 31, 32, 33, 34, 37, 42, 48, 49, 57, 127, 128, 129, 130, 131, 132, 134, 135, 136], "exist": [8, 13, 15, 58, 86, 87, 122, 153], "structur": [8, 9, 152], "make": [8, 22], "easi": 8, "scikit": 8, "equival": [8, 15], "resid": 8, "re": [8, 18, 67, 119], "demo": 8, "notebook": [8, 52], "model": [8, 142, 144, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166], "licens": [8, 158, 159, 163], "conduct": 8, "str": [9, 10, 11, 18, 20, 27, 28, 39, 40, 43, 51, 58, 59, 67, 91, 92, 98, 117, 122, 123, 124, 125, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163], "_query_compil": [9, 59], "querycompil": [9, 58, 59, 123], "mutabl": 9, "potenti": 9, "heterogen": 9, "tabular": [9, 55], "referenc": [9, 25, 71, 152, 153], "rather": [9, 37, 120], "wildcard": [9, 59], "g": [9, 10, 11, 13, 153, 158, 159], "pandas_api_doc": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 61, 64, 65, 67, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 85, 86, 87, 88, 94, 98, 109, 110, 113, 115, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136], "import": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 53, 57, 59, 60, 61, 62, 63, 65, 68, 70, 71, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 115, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 152, 153], "opensearch_test_cli": [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 53, 57, 59, 60, 61, 62, 63, 65, 68, 70, 71, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 115, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 152, 153], "head": [9, 27, 28, 41, 53, 60, 62, 63, 68, 80, 82, 83, 92, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 111, 112, 115, 118, 152, 164, 171], "todo": [9, 13, 14, 31, 32, 34, 37, 43, 49, 58, 61, 76, 77, 78, 79, 113, 120, 122], "index_field": 9, "01t00": 9, "772": 9, "100846": 9, "159": 9, "990962": 9, "800": 9, "217104": 9, "803": 9, "015200": 9, "func": [10, 11, 124, 125], "int": [10, 11, 18, 21, 23, 24, 26, 35, 36, 40, 42, 44, 47, 50, 67, 69, 75, 76, 77, 78, 79, 81, 85, 88, 92, 94, 107, 109, 110, 113, 114, 120, 121, 133, 153, 156, 160, 161, 162], "arg": [10, 11], "kwarg": [10, 11, 40, 92], "over": [10, 11, 23, 24, 27, 28, 40], "dict": [10, 11, 122, 141, 153, 156], "klass": [10, 11], "accept": [10, 11, 20, 124, 125], "mad": [10, 11, 164, 171], "median": [10, 11, 75, 127, 164, 171], "mode": [10, 11, 51, 154, 156, 164, 171], "quantil": [10, 11, 164, 171], "rank": [10, 11], "sem": [10, 11], "skew": [10, 11], "var": [10, 11, 110, 164, 171], "datatyp": [10, 11, 31, 32, 33, 34, 35, 42, 48, 49, 57, 122, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136], "nan": [10, 11, 14, 30, 31, 32, 33, 34, 35, 42, 48, 49, 52, 55, 57, 61, 117, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136], "nat": [10, 11, 30, 31, 32, 33, 34, 35, 42, 48, 49, 57, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136], "posit": [10, 11, 21, 50], "scalar": [10, 11], "astyp": [10, 11], "8204364": [10, 11, 113], "92616288": [10, 11], "assert": [12, 25, 71], "isinst": [12, 25, 71], "na": [13, 20, 23, 24, 73, 74, 86, 87], "against": [13, 40], "ineffici": [13, 58], "altern": [13, 15], "value_count": [13, 171], "aggregat": [13, 37, 120], "tag": 13, "addit": [13, 14, 40, 43, 60, 61, 92, 95], "summari": [13, 14, 26, 39, 61], "ecommerc": [13, 15, 26, 35, 37, 40, 41, 46, 60, 62, 63, 68, 80, 81, 82, 83, 92, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 108, 111, 112, 118], "customer_first_nam": [13, 15, 26, 37, 41, 60], "geoip": [13, 26, 35, 41], "city_nam": [13, 26, 35, 41], "4675": [13, 15, 26, 46, 108], "4094": [13, 26], "statist": [14, 61], "summar": [14, 61], "central": [14, 61], "tendenc": [14, 61], "dispers": [14, 61], "distribut": [14, 61, 161], "exclud": [14, 23, 24, 45, 61], "well": [14, 61], "mix": [14, 61], "depend": [14, 40, 61, 92, 156], "386661": [14, 61], "743006": 14, "level": 15, "inplac": 15, "rais": [15, 40, 92, 122, 153, 157, 161], "multiindex": 15, "suppress": 15, "caller": 15, "email": 15, "eddi": [15, 40, 60], "underwood": 15, "famili": 15, "zzz": 15, "mari": [15, 41, 60], "bailei": 15, "gwen": [15, 60], "butler": 15, "dian": [15, 60], "chandler": 15, "weber": 15, "4670": 15, "lambert": 15, "4671": [15, 40], "jim": [15, 40], "gilbert": 15, "4672": [15, 40], "yahya": [15, 40], "rivera": 15, "4673": 15, "hampton": 15, "4674": [15, 26, 40], "jackson": [15, 40], "hopkin": 15, "goodwin": 15, "oliv": [15, 40], "rio": 15, "_os_dtype_to_pd_dtyp": [16, 65], "__doc__": [16, 65], "item": [18, 19, 44, 67, 142], "regex": [18, 67], "accord": [18, 67], "routin": [18, 67], "regular": [18, 28, 67], "enforc": [18, 67], "mutual": [18, 67], "exclus": [18, 67], "ex": 19, "dropna": [20, 22, 35, 122, 123, 153], "dataframegroupbi": [20, 164], "ae": [20, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136], "110": [20, 122, 124, 125, 131], "799911": [20, 124, 125, 131], "1126": [20, 124, 125, 128], "148682": [20, 124, 125, 128], "132": 20, "443756": 20, "817": [20, 133], "931030": 20, "125": [20, 124, 125, 131], "589394": [20, 124, 125, 131], "642822": [20, 124, 125, 128], "389603": 20, "1172": 20, "382568": 20, "AT": [20, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136], "1181": [20, 124, 125, 128], "835815": [20, 124, 125, 128], "tr": [20, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136], "307": 20, "915649": 20, "145966": [20, 124, 125, 131], "153069": 20, "1192": 20, "429932": 20, "za": [20, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136], "002663": [20, 124, 125, 131], "1196": [20, 124, 125, 128], "186157": [20, 124, 125, 128], "121": [20, 122], "280296": 20, "1175": 20, "709961": 20, "643": [20, 129], "956793": 20, "717949": 20, "388": 20, "828809": 20, "571429": 20, "673": 20, "551677": 20, "746154": 20, "682": 20, "197241": 20, "733333": 20, "647": 20, "158290": 20, "819936": 20, "598": 20, "063146": 20, "752014": 20, "579": [20, 133], "799066": 20, "767068": 20, "636": 20, "998605": 20, "738589": 20, "677": 20, "794078": 20, "928571": 20, "sort": [21, 27, 28, 50, 58, 119, 120, 162], "quickli": [21, 50], "sydnei": 21, "kingsford": 21, "smith": 21, "grid": [22, 70], "xlabels": [22, 70], "xrot": [22, 70], "ylabels": [22, 70], "yrot": [22, 70], "sharex": 22, "sharei": 22, "layout": 22, "kwd": [22, 70], "deriv": [22, 70, 122], "_core": [22, 70], "hist_fram": [22, 70], "d": [22, 153], "col": 22, "select_dtyp": [22, 164], "occurr": [23, 24, 41, 120], "maximum": [23, 31, 76], "oml_df": [23, 24, 35, 42, 53, 56, 133, 152, 153], "1843": 23, "109": 23, "1988": 23, "minimum": [24, 34, 79], "5454": 24, "limit": [25, 71, 162], "buf": [26, 52, 55, 117], "stringio": 26, "max_col": [26, 52, 55], "memory_usag": 26, "show_count": 26, "concis": 26, "copi": 26, "difficult": 26, "appropri": 26, "sparsedatafram": 26, "iter": [27, 28, 122, 166], "tupl": [27, 28, 46, 108, 122, 153], "itertupl": [27, 164], "namedtupl": [27, 28], "possibli": 28, "iterrow": [28, 164], "69421554118": [28, 53], "041778346198": [28, 53], "yield": 28, "deviat": [30, 48, 75, 110, 127, 130, 134], "213": [30, 75], "35497": 30, "00000": 30, "473011": 30, "484": 30, "remaind": [31, 32, 34, 37, 49, 76, 77, 78, 79, 113, 120], "preserv": [31, 32, 33, 34, 42, 48, 49, 57, 127, 128, 129, 130, 131, 132, 134, 135, 136], "73": [31, 82, 83], "254": [32, 122], "83598": 32, "564438232": 32, "363": 33, "624776611": 33, "362667": 33, "387": 33, "021": 34, "os_siz": [35, 81, 120], "calcul": [35, 42, 81, 94, 133], "oml_ecommerc": [35, 81], "total_quant": [35, 60, 62, 63, 68, 80, 82, 83, 93, 98, 103, 108, 111, 112, 118], "customer_birth_d": [35, 37], "day_of_week": [35, 81], "taxful_total_pric": [35, 60, 62, 63, 68, 80, 82, 83, 92, 93, 95, 96, 97, 99, 100, 101, 102, 104, 105, 106, 111, 112, 118], "york": 35, "thursdai": [35, 81], "98": [35, 60, 62, 63, 68, 80, 82, 83, 92, 93, 95, 96, 97, 99, 100, 101, 102, 104, 105, 106, 111, 112, 118], "tax_amount": 35, "order_d": [35, 81], "2016": [35, 81], "definit": [36, 85], "cardin": [37, 164], "ignore_abov": 37, "256": [37, 134], "currenc": [37, 40], "debug": 39, "compil": 39, "tail": [39, 164, 171], "12608": 39, "cyeg": 39, "120": 39, "12720": 39, "bhm": 39, "255": [39, 126, 132, 134], "12725": 39, "atl": 39, "12823": 39, "ngo": 39, "12907": 39, "lim": 39, "225": 39, "match_phras": [40, 92], "must_not_match": 40, "multi_match_typ": 40, "match_only_text_field": [40, 92], "fuzzi": [40, 92], "multi_match": 40, "otherwis": [40, 47, 66, 109], "instead": [40, 92, 145, 149, 150, 151], "account": [40, 92, 122], "boolean": [40, 43, 92, 144, 146, 150], "NOT": 40, "prevent": [40, 92], "aren": [40, 92], "properli": [40, 92], "men": [40, 92], "cloth": [40, 92], "eur": 40, "accessori": [40, 92], "shoe": [40, 92], "abd": 40, "4663": 40, "samir": 40, "4667": 40, "sultan": 40, "women": [40, 92], "2310": 40, "dsl": 41, "geo": 41, "distanc": 41, "locat": [41, 154], "geo_dist": 41, "1km": 41, "dubai": 41, "rabbia": 41, "al": 41, "robbi": 41, "nest": 41, "361": 42, "040768": 42, "296587520": 42, "637076736": 42, "658119680": 42, "expr": 43, "pandas_user_guid": 43, "2730": 43, "random_st": [44, 107], "fraction": 44, "cannot": 44, "seed": 44, "random": 44, "datetim": 45, "407": 48, "93951": 48, "20436e": 49, "1678": 49, "37035": 49, "xi": 50, "xianyang": 50, "zurich": 50, "ukrainka": 50, "air": [50, 120], "ministro": 50, "pistarini": 50, "washington": 50, "dull": 50, "path_or_buf": 51, "sep": [51, 122], "na_rep": [51, 52, 55, 117], "float_format": [51, 52, 55, 117], "index_label": 51, "w": 51, "encod": [51, 122], "quot": [51, 122], "quotechar": [51, 122], "line_termin": 51, "chunksiz": [51, 122, 153], "tupleize_col": 51, "date_format": 51, "doublequot": [51, 122], "escapechar": [51, 122], "decim": [51, 52, 55, 122], "write": 51, "comma": [51, 122], "separ": [51, 122], "col_spac": [52, 55], "formatt": [52, 55], "sparsifi": [52, 55], "justifi": [52, 55], "max_row": [52, 55, 117], "show_dimens": [52, 55], "bold_row": 52, "escap": 52, "border": 52, "table_id": 52, "render_link": 52, "render": [52, 55, 117], "tabl": 52, "scenario": [52, 55, 117], "avoid": [52, 55, 117], "accident": [52, 55, 117], "dump": [52, 55, 117], "overridden": [52, 55, 117], "Not": [53, 56, 115], "represent": [53, 56, 115, 117], "bewar": [53, 56, 115], "pd_df": [53, 152, 153], "f": [53, 115, 153], "ntype": [53, 115], "show_progress": [54, 116, 152], "line_width": 55, "consol": 55, "friendli": 55, "to_numpi": [56, 164, 171], "varianc": [57, 121, 136], "70964": [57, 121], "570234": 57, "111987": 57, "761279": 57, "76128": 57, "query_compil": [58, 123], "behaviour": 58, "slice": 58, "docvalu": 58, "discourag": 58, "advis": 58, "duplic": 58, "anoth": [58, 162], "doc_valu": 58, "proxi": 59, "delet": [59, 122, 153, 166], "rebuilt": 59, "inconsist": 59, "wise": [60, 62, 63, 68, 80, 82, 83, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 111, 112, 118], "binari": [60, 62, 63, 68, 80, 82, 83, 93, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 111, 112, 118, 166], "174": [60, 62, 63, 68, 80, 82, 83, 93, 95, 96, 97, 99, 100, 101, 102, 104, 105, 106, 111, 112, 118], "80": [60, 62, 63, 68, 80, 82, 83, 93, 95, 96, 97, 99, 100, 101, 102, 104, 105, 106, 111, 112, 118], "980000": [60, 80, 95, 104, 105, 111, 112], "979996": [60, 80, 95, 104, 105, 111, 112], "175": [60, 95], "81": [60, 95], "980003": [60, 80, 95, 104, 105, 111, 112], "201": 60, "82": 60, "customer_last_nam": 60, "eddieunderwood": 60, "marybailei": 60, "gwenbutl": 60, "dianechandl": 60, "eddieweb": 60, "divis": [62, 63, 68, 96, 97, 99, 106, 118], "truediv": [62, 63, 171], "99": [62, 63, 68, 118, 122], "989998": [62, 63, 118], "87": [62, 63, 68, 118], "489998": [62, 63, 118], "490002": [62, 63, 118], "draw": 70, "noqa": 70, "f401": 70, "densiti": 70, "booleanfilt": [72, 73, 74, 86, 87], "miss": [73, 74, 86, 87, 122, 153], "isna": [74, 171], "modulo": [80, 100], "959999": [82, 83], "107": [82, 83, 122], "399": [82, 83], "959991": [82, 83], "349": [82, 83], "161": [82, 83, 122], "960007": [82, 83], "mul": [83, 101, 102, 171], "notna": [87, 171], "uniqu": [88, 138, 139, 140, 142, 143, 144, 145, 148, 149, 171], "queryfilt": 92, "221": [92, 127], "234": 92, "93": 92, "239": 92, "273": 92, "214": 92, "exponenti": [93, 103], "1367": 93, "520366": 93, "2913": 93, "840351": 93, "39991": 93, "998691": 93, "30617": 93, "998905": 93, "6557": 93, "760944": 93, "289159912": 94, "031627441": 94, "256136963": 94, "844534180": 94, "div": [96, 97, 106, 171], "027042": [96, 97, 106], "018525": [96, 97, 106], "005001": [96, 97, 106], "005715": [96, 97, 106], "012349": [96, 97, 106], "new_nam": 98, "symbol": 98, "floordiv": [99, 171], "500": [99, 100, 130], "mod": [100, 171], "260006": 100, "180004": 100, "040009": 100, "150": 100, "119980": 100, "369": [101, 102], "799995": [101, 102], "539": [101, 102], "1999": [101, 102], "799957": [101, 102], "1749": [101, 102], "809": [101, 102], "800034": [101, 102], "pow": [103, 171], "int_": 103, "subtract": [104, 105, 111, 171], "sub": [104, 105, 112, 171], "198": [104, 105], "173": [104, 105], "79": [104, 105], "197": [111, 112, 122], "172": [111, 112], "78": [111, 112, 122], "oml_seri": 115, "oml_": 115, "pd_": 115, "min_row": 117, "slightli": 119, "seen": 119, "bucket": 120, "descend": 120, "overal": 120, "os_api_doc": 120, "3331": [120, 122], "3274": 120, "3234": 120, "3220": 120, "etl": [122, 152, 153, 165], "filepath_or_buff": 122, "os_if_exist": [122, 153], "os_refresh": [122, 153], "os_type_overrid": [122, 153], "delimit": 122, "usecol": 122, "prefix": 122, "true_valu": 122, "false_valu": 122, "skipinitialspac": 122, "skiprow": 122, "skipfoot": 122, "nrow": 122, "na_valu": 122, "keep_default_na": 122, "na_filt": 122, "skip_blank_lin": 122, "parse_d": 122, "infer_datetime_format": 122, "keep_date_col": 122, "date_pars": 122, "dayfirst": 122, "cache_d": 122, "thousand": 122, "linetermin": 122, "comment": 122, "dialect": 122, "warn_bad_lin": 122, "error_bad_lin": 122, "on_bad_lin": 122, "delim_whitespac": 122, "low_memori": 122, "memory_map": 122, "float_precis": 122, "modifi": [122, 153], "behav": [122, 153], "valueerror": [122, 153], "insert": [122, 153], "bulk": [122, 153], "es_typ": 122, "overrid": [122, 153], "churn": 122, "osclient": 122, "area": 122, "phone": 122, "plan": 122, "voic": 122, "mail": 122, "vmail": 122, "dai": 122, "minut": 122, "charg": 122, "ev": 122, "night": 122, "intl": 122, "servic": 122, "k": 122, "128": 122, "415": 122, "382": 122, "4657": 122, "ye": 122, "265": 122, "244": [122, 134], "91": 122, "oh": 122, "371": 122, "7191": 122, "123": 122, "195": [122, 127], "103": 122, "137": 122, "104": 122, "162": 122, "84": 122, "408": 122, "89": 122, "86": 122, "196": 122, "186": 122, "3328": 122, "192": [122, 127], "279": [122, 134], "3329": 122, "191": 122, "3330": 122, "510": 122, "184": 122, "139": 122, "3332": 122, "74": 122, "241": 122, "3333": 122, "took": 122, "timed_out": 122, "skip": [122, 156], "hit": 122, "eq": 122, "max_scor": 122, "_score": 122, "retain": 122, "hold": 123, "au": [124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136], "294312": [124, 125, 131], "1197": [124, 125, 128], "632690": [124, 125, 128], "ca": [124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136], "557251": [124, 125, 131], "1198": [124, 125, 128], "852539": [124, 125, 128], "101": [124, 125, 131], "004005": [124, 125, 131], "742310": [124, 125, 128], "877190": [124, 125, 131], "621582": [124, 125, 128], "142": [124, 125, 131], "876465": [124, 125, 131], "855": [124, 125, 128], "935547": [124, 125, 128], "305": [126, 132], "377": [126, 132], "416": [126, 132], "944": [126, 132], "739": [126, 132], "1987": [126, 132], "283": [126, 132], "233": 127, "697174": 127, "189": 127, "250061": 127, "823669": 127, "202": 127, "539764": 127, "203": 127, "344696": 127, "206": 127, "431702": 127, "178": 127, "658447": 127, "863434": 127, "228": 127, "461365": 127, "162842": 127, "605": 129, "132970": 129, "152174": 129, "695652": 129, "891304443": 129, "674": 129, "827252": 129, "147541": 129, "744262": 129, "593442627": 129, "650530": 129, "175066": 129, "872679": 129, "469496094": 129, "669": 129, "558832": 129, "129808": 129, "843750": 129, "199519287": 129, "648": 129, "747109": 129, "134534": 129, "951271": 129, "165254150": 129, "662": 129, "994963": 129, "131258": 129, "832206": 129, "534506104": 129, "660": 129, "612988": 129, "149020": 129, "682353": 129, "447058838": 129, "485": 129, "253247": 129, "100000": 129, "900000": 129, "000000000": 129, "595": 129, "774391": 129, "125315": 129, "753900": 129, "456970215": 129, "053057": 129, "148410": 129, "766784": 129, "141342773": 129, "585": 130, "720490": 130, "678": 130, "447433": 130, "659": 130, "715592": 130, "689": 130, "241348": 130, "663": 130, "516057": 130, "670": 130, "714956": 130, "680": 130, "111084": 130, "441": 130, "681122": 130, "600": 130, "591525": 130, "633": 130, "935425": 130, "572": 133, "290384": 133, "578": 133, "140564": 133, "567": 133, "980560": 133, "582": 133, "618713": 133, "590": 133, "170986": 133, "811890": 133, "574": 133, "131340": 133, "852264": 133, "591": 133, "533699": 133, "877014": 133, "791": 133, "622625": 133, "793": 133, "362946": 133, "378523": 133, "766": 133, "855530": 133, "319": 133, "925979": 133, "704562": 133, "327": 133, "311007": 133, "336": 133, "839572": 133, "332": 133, "323011": 133, "314": 133, "472537": 133, "652659": 133, "298": 133, "483032": 133, "290205": 133, "024850": 133, "362137": 133, "568": 133, "323944": 133, "489746": 133, "523": 133, "890680": 133, "875500": 134, "367171": 134, "020634": 134, "903626": 134, "355811": 134, "949901": 134, "883342": 134, "381035": 134, "026411": 134, "585377": 134, "336902": 134, "961486": 134, "261": 134, "263054": 134, "341587": 134, "921980": 134, "259": 134, "696213": 134, "338140": 134, "964815": 134, "232": 134, "504297": 134, "357510": 134, "991340": 134, "267": 134, "827572": 134, "333333": 134, "191454": 134, "272": 134, "774819": 134, "331242": 134, "939469": 134, "505568": 134, "356766": 134, "948258": 134, "783612e": 135, "124": 135, "058223e": 135, "837": 135, "437872e": 135, "66": 135, "1083": 135, "785365e": 135, "1183": 135, "124173e": 135, "127": 135, "2786": 135, "899533e": 135, "97": 135, "2093": 135, "684563e": 135, "684": 135, "852532e": 135, "183804e": 135, "249": 135, "5472": 135, "819840e": 135, "783": 135, "75789": 136, "979090": 136, "130443": 136, "950549": 136, "59683": 136, "055316": 136, "125979": 136, "783429": 136, "65726": 136, "669676": 136, "144610": 136, "090013": 136, "65088": 136, "483446": 136, "113094": 136, "833562": 136, "68149": 136, "950516": 136, "116496": 136, "688139": 136, "67305": 136, "277617": 136, "114107": 136, "852666": 136, "53740": 136, "570338": 136, "127062": 136, "942132": 136, "61245": 136, "521047": 136, "094868": 136, "100420": 136, "74349": 136, "939410": 136, "109638": 136, "758700": 136, "62920": 136, "072901": 136, "126608": 136, "775609": 136, "self": [138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163], "delete_task": [139, 168], "wait": [140, 144, 145, 146, 147, 150, 151], "until": [140, 144, 145, 146, 147, 150, 151], "predict": 141, "anomali": 141, "respons": 141, "_predict": 142, "nlp": [142, 148, 149], "properti": 142, "wait_until_task_don": 144, "done": 144, "load_model": [145, 150, 151, 168], "wait_until_load": [145, 150, 151], "break": [146, 150], "filepath": [146, 150], "expect": [146, 150, 154, 160, 161, 163], "serv": [146, 150, 154], "_undeploi": [148, 149], "upload_pretrained_model": [151, 168], "signfic": 152, "stdout": 152, "10000": 152, "2020": 152, "572395": 152, "309031": 152, "pandas_to_opensearch": [152, 165], "os_verify_mapping_compat": 153, "thread_count": 153, "use_pandas_index_for_os_id": 153, "mainli": 153, "destin": 153, "refresh": 153, "field_nam": 153, "es_data_typ": 153, "verifi": 153, "schema": 153, "thread": 153, "destination_index": 153, "141": 153, "foo": 153, "20190102": 153, "h": 153, "if_exist": 153, "sync": 153, "readabl": 153, "__init__": [154, 170], "download": [154, 158, 159, 162], "hug": [154, 156], "face": [154, 156], "design": 154, "query_df": 155, "version_numb": 156, "model_zip_file_path": 156, "dimens": 156, "pool": 156, "readm": 156, "synthet": [157, 161], "unzip": [157, 161], "synthetic_queri": [157, 161], "empti": [157, 161, 164, 171], "up": [157, 161], "save_json_folder_path": [158, 159], "model_output_path": [158, 159], "add_apache_licens": [158, 159, 163], "open": [158, 159], "sample_model": [158, 159], "save_pre_trained_model_json": [158, 159], "default_folder_path": [158, 159], "constructor": [158, 159, 166], "trace": [158, 159, 169], "apach": [158, 159, 163], "todai": 159, "compute_environ": [160, 161], "num_process": 160, "accler": 160, "local_machin": [160, 161], "cpu": 160, "learning_r": [161, 162], "batch_siz": [161, 162], "fine": [161, 169], "tune": [161, 169], "pickl": 161, "probabl": 161, "passag": [161, 162], "q1": 161, "p1": 161, "pa1": 161, "launch": 161, "measur": 161, "multipli": [161, 171], "approxim": [161, 164], "english": 161, "vocabulari": 161, "rtype": 161, "train_exampl": 162, "certain": 162, "middl": 162, "corpora": 162, "ndim": [164, 171], "accur": 164, "hyperloglog": 164, "exact": 164, "idxmax": 164, "idxmin": 164, "os_match": [164, 171], "os_queri": 164, "to_csv": 164, "to_html": 164, "to_str": [164, 171], "to_panda": [164, 171], "page": 166, "overview": 166, "public": 166, "expos": 166, "namespac": 166, "applic": 166, "groupbi": 166, "reindex": 166, "manipul": 166, "serial": 166, "convers": 166, "unload": 166, "step": 166, "few": 169, "distilroberta": 169, "mpnet": 169, "qa": 169, "paraphras": 169, "l3": 169, "multilingu": 169, "load_training_data": 170, "set_up_accelerate_config": 170, "train_model": 170, "zip_model": 170, "divid": 171, "radd": 171, "rsub": 171, "rsubtract": 171, "rmul": 171, "rmultipli": 171, "rdiv": 171, "rdivid": 171, "rtruediv": 171, "rfloordiv": 171, "rmod": 171, "rpow": 171, "renam": 171, "isnul": 171, "notnul": 171}, "objects": {"": [[8, 0, 0, "-", "opensearch_py_ml"]], "opensearch_py_ml": [[9, 1, 1, "", "DataFrame"], [58, 1, 1, "", "Index"], [59, 1, 1, "", "Series"]], "opensearch_py_ml.DataFrame": [[10, 2, 1, "", "agg"], [11, 2, 1, "", "aggregate"], [12, 3, 1, "", "columns"], [13, 2, 1, "", "count"], [14, 2, 1, "", "describe"], [15, 2, 1, "", "drop"], [16, 3, 1, "", "dtypes"], [17, 3, 1, "", "empty"], [18, 2, 1, "", "filter"], [19, 2, 1, "", "get"], [20, 2, 1, "", "groupby"], [21, 2, 1, "", "head"], [22, 2, 1, "", "hist"], [23, 2, 1, "", "idxmax"], [24, 2, 1, "", "idxmin"], [25, 3, 1, "", "index"], [26, 2, 1, "", "info"], [27, 2, 1, "", "iterrows"], [28, 2, 1, "", "itertuples"], [29, 2, 1, "", "keys"], [30, 2, 1, "", "mad"], [31, 2, 1, "", "max"], [32, 2, 1, "", "mean"], [33, 2, 1, "", "median"], [34, 2, 1, "", "min"], [35, 2, 1, "", "mode"], [36, 3, 1, "", "ndim"], [37, 2, 1, "", "nunique"], [38, 3, 1, "", "os_dtypes"], [39, 2, 1, "", "os_info"], [40, 2, 1, "", "os_match"], [41, 2, 1, "", "os_query"], [42, 2, 1, "", "quantile"], [43, 2, 1, "", "query"], [44, 2, 1, "", "sample"], [45, 2, 1, "", "select_dtypes"], [46, 3, 1, "", "shape"], [47, 3, 1, "", "size"], [48, 2, 1, "", "std"], [49, 2, 1, "", "sum"], [50, 2, 1, "", "tail"], [51, 2, 1, "", "to_csv"], [52, 2, 1, "", "to_html"], [53, 2, 1, "", "to_numpy"], [54, 2, 1, "", "to_pandas"], [55, 2, 1, "", "to_string"], [56, 3, 1, "", "values"], [57, 2, 1, "", "var"]], "opensearch_py_ml.Series": [[60, 2, 1, "", "add"], [61, 2, 1, "", "describe"], [62, 2, 1, "", "div"], [63, 2, 1, "", "divide"], [64, 3, 1, "", "dtype"], [65, 3, 1, "", "dtypes"], [66, 3, 1, "", "empty"], [67, 2, 1, "", "filter"], [68, 2, 1, "", "floordiv"], [69, 2, 1, "", "head"], [70, 2, 1, "", "hist"], [71, 3, 1, "", "index"], [72, 2, 1, "", "isin"], [73, 2, 1, "", "isna"], [74, 2, 1, "", "isnull"], [75, 2, 1, "", "mad"], [76, 2, 1, "", "max"], [77, 2, 1, "", "mean"], [78, 2, 1, "", "median"], [79, 2, 1, "", "min"], [80, 2, 1, "", "mod"], [81, 2, 1, "", "mode"], [82, 2, 1, "", "mul"], [83, 2, 1, "", "multiply"], [84, 3, 1, "", "name"], [85, 3, 1, "", "ndim"], [86, 2, 1, "", "notna"], [87, 2, 1, "", "notnull"], [88, 2, 1, "", "nunique"], [89, 3, 1, "", "os_dtype"], [90, 3, 1, "", "os_dtypes"], [91, 2, 1, "", "os_info"], [92, 2, 1, "", "os_match"], [93, 2, 1, "", "pow"], [94, 2, 1, "", "quantile"], [95, 2, 1, "", "radd"], [96, 2, 1, "", "rdiv"], [97, 2, 1, "", "rdivide"], [98, 2, 1, "", "rename"], [99, 2, 1, "", "rfloordiv"], [100, 2, 1, "", "rmod"], [101, 2, 1, "", "rmul"], [102, 2, 1, "", "rmultiply"], [103, 2, 1, "", "rpow"], [104, 2, 1, "", "rsub"], [105, 2, 1, "", "rsubtract"], [106, 2, 1, "", "rtruediv"], [107, 2, 1, "", "sample"], [108, 3, 1, "", "shape"], [109, 3, 1, "", "size"], [110, 2, 1, "", "std"], [111, 2, 1, "", "sub"], [112, 2, 1, "", "subtract"], [113, 2, 1, "", "sum"], [114, 2, 1, "", "tail"], [115, 2, 1, "", "to_numpy"], [116, 2, 1, "", "to_pandas"], [117, 2, 1, "", "to_string"], [118, 2, 1, "", "truediv"], [119, 2, 1, "", "unique"], [120, 2, 1, "", "value_counts"], [121, 2, 1, "", "var"]], "opensearch_py_ml.etl": [[122, 4, 1, "", "csv_to_opensearch"], [152, 2, 1, "", "opensearch_to_pandas"], [153, 2, 1, "", "pandas_to_opensearch"]], "opensearch_py_ml.groupby": [[123, 1, 1, "", "DataFrameGroupBy"]], "opensearch_py_ml.groupby.DataFrameGroupBy": [[124, 2, 1, "", "agg"], [125, 2, 1, "", "aggregate"], [126, 2, 1, "", "count"], [127, 2, 1, "", "mad"], [128, 2, 1, "", "max"], [129, 2, 1, "", "mean"], [130, 2, 1, "", "median"], [131, 2, 1, "", "min"], [132, 2, 1, "", "nunique"], [133, 2, 1, "", "quantile"], [134, 2, 1, "", "std"], [135, 2, 1, "", "sum"], [136, 2, 1, "", "var"]], "opensearch_py_ml.ml_commons.MLCommonClient": [[138, 4, 1, "", "delete_model"], [139, 4, 1, "", "delete_task"], [140, 4, 1, "", "deploy_model"], [141, 4, 1, "", "execute"], [142, 4, 1, "", "generate_embedding"], [143, 4, 1, "", "get_model_info"], [144, 4, 1, "", "get_task_info"], [145, 4, 1, "", "load_model"], [146, 4, 1, "", "register_model"], [147, 4, 1, "", "register_pretrained_model"], [148, 4, 1, "", "undeploy_model"], [149, 4, 1, "", "unload_model"], [150, 4, 1, "", "upload_model"], [151, 4, 1, "", "upload_pretrained_model"]], "opensearch_py_ml.ml_models.SentenceTransformerModel": [[154, 4, 1, "", "__init__"], [155, 4, 1, "", "load_training_data"], [156, 4, 1, "", "make_model_config_json"], [157, 4, 1, "", "read_queries"], [158, 4, 1, "", "save_as_onnx"], [159, 4, 1, "", "save_as_pt"], [160, 4, 1, "", "set_up_accelerate_config"], [161, 4, 1, "", "train"], [162, 4, 1, "", "train_model"], [163, 4, 1, "", "zip_model"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"]}, "titleterms": {"demo": [0, 1, 2, 3, 4, 5, 6, 7], "notebook": [0, 1, 2, 3, 4, 5, 6, 7], "deploi": [0, 140, 168], "cliptextmodel": 0, "opensearch": [0, 2, 4, 5, 8, 164, 165, 171], "download": [0, 1, 2, 3, 4, 5, 7], "step": [0, 1, 2, 3, 4, 5, 7, 170], "0": [0, 1, 2, 3, 4, 7], "import": [0, 1, 2, 3, 4, 5, 7], "packag": [0, 2, 4, 5], "set": [0, 1, 2, 4, 5], "up": [0, 1, 2, 4, 5], "client": [0, 1, 2, 3, 4, 5, 7], "1": [0, 1, 2, 3, 4, 5, 7], "trace": [0, 4, 6], "export": [0, 170], "torchscript": [0, 4], "2": [0, 1, 2, 4, 5], "prep": 0, "file": [0, 2, 167], "registr": 0, "3": [0, 1, 2, 4, 5], "regist": [0, 4, 146, 147, 168], "model": [0, 1, 2, 4, 5, 6, 138, 140, 143, 145, 146, 147, 148, 149, 150, 151, 168, 169, 170], "4": [0, 1, 2, 4, 5], "metric": 1, "correl": 1, "test": 1, "introduct": [1, 5], "defin": [1, 5], "helper": [1, 5], "function": [1, 3, 5, 164, 165, 171], "prepar": 1, "data": [1, 3, 5, 6, 7, 164, 171], "result": 1, "visual": 1, "mlcommon": [2, 168], "integr": [2, 6], "upload": [2, 5, 150, 151, 168], "nlp": 2, "from": 2, "local": 2, "cluster": [2, 5], "load": [2, 5, 145, 168], "get": [2, 3, 7, 8, 19, 143, 144, 168], "task": [2, 139, 144, 168], "5": [2, 4, 5], "gener": [2, 4, 5, 142, 165, 168], "sentenc": [2, 4, 5, 154, 170], "embed": [2, 4, 142, 168], "6": 2, "unload": [2, 149, 168], "7": 2, "delet": [2, 138, 139, 168], "datafram": [3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 164], "setup": [3, 7], "compar": 3, "similar": 3, "differ": 3, "between": 3, "panda": [3, 5, 6, 165], "v": 3, "opensearch_py_ml": [3, 58], "attribut": [3, 164, 171], "underli": [3, 164, 171], "column": [3, 7, 12], "dtype": [3, 16, 64, 65], "select_dtyp": [3, 45], "empti": [3, 17, 66], "shape": [3, 46, 108], "index": [3, 7, 25, 58, 71, 164, 171], "valu": [3, 56], "iter": [3, 164, 171], "head": [3, 7, 21, 69], "tail": [3, 7, 50, 114], "kei": [3, 29], "queri": [3, 5, 43], "boolean": [3, 7], "applic": [3, 164], "groupbi": [3, 20, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 164], "window": [3, 164], "agg": [3, 10, 124], "comput": [3, 164, 171], "descript": [3, 7, 164, 171], "stat": [3, 164, 171], "count": [3, 13, 126], "describ": [3, 14, 61], "info": [3, 26, 143, 144, 168], "max": [3, 31, 76, 128], "min": [3, 34, 79, 131], "mean": [3, 32, 77, 129], "sum": [3, 49, 113, 135], "transform": [4, 5, 154, 170], "save": [4, 5], "format": 4, "onnx": 4, "train": [5, 6, 161, 169, 170], "synthet": 5, "passag": 5, "convert": 5, "list": 5, "string": 5, "instanti": 5, "an": 5, "object": 5, "class": 5, "synthetic_query_gener": 5, "thi": 5, "i": 5, "how": 5, "sampl": [5, 44, 107], "look": 5, "like": [5, 6], "read": 5, "fine": 5, "tune": 5, "hug": 5, "face": 5, "exampl": [6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 53, 57, 59, 60, 61, 62, 63, 65, 68, 70, 71, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 115, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 152, 153], "explor": 6, "ml": [6, 8], "common": 6, "plugin": 6, "In": 6, "hous": 6, "python": 6, "base": 6, "onlin": 7, "retail": 7, "analysi": 7, "start": [7, 8], "select": [7, 164, 171], "aggreg": [7, 11, 125], "statist": 7, "arithmet": 7, "oper": [7, 171], "py": 8, "machin": 8, "learn": 8, "back": 8, "instal": 8, "paramet": [9, 10, 11, 15, 18, 19, 20, 21, 23, 24, 27, 28, 31, 32, 33, 34, 35, 40, 41, 42, 43, 44, 48, 49, 50, 57, 59, 60, 62, 63, 67, 68, 80, 81, 82, 83, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 111, 112, 118, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 152, 153, 161], "see": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 61, 64, 65, 67, 71, 73, 74, 75, 76, 77, 78, 79, 81, 85, 86, 87, 88, 94, 98, 109, 110, 113, 115, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 152, 153], "also": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 61, 64, 65, 67, 71, 73, 74, 75, 76, 77, 78, 79, 81, 85, 86, 87, 88, 94, 98, 109, 110, 113, 115, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 152, 153], "return": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 54, 57, 60, 61, 62, 63, 65, 67, 68, 71, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 85, 86, 87, 88, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 152, 153, 161], "drop": 15, "filter": [18, 67], "note": [18, 22, 26, 46, 59, 67, 70, 108, 122], "hist": [22, 70], "idxmax": 23, "idxmin": 24, "iterrow": 27, "yield": 27, "itertupl": 28, "mad": [30, 75, 127], "median": [33, 78, 130], "mode": [35, 81], "ndim": [36, 85], "nuniqu": [37, 88, 132], "os_dtyp": [38, 89, 90], "os_info": [39, 91], "os_match": [40, 92], "os_queri": 41, "quantil": [42, 94, 133], "size": [47, 109], "std": [48, 110, 134], "to_csv": 51, "to_html": 52, "to_numpi": [53, 115], "to_panda": [54, 116], "to_str": [55, 117], "var": [57, 121, 136], "seri": [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 171], "add": 60, "div": 62, "divid": 63, "floordiv": 68, "isin": 72, "isna": 73, "isnul": 74, "mod": 80, "mul": 82, "multipli": 83, "name": 84, "notna": 86, "notnul": 87, "pow": 93, "radd": 95, "rdiv": 96, "rdivid": 97, "renam": 98, "rfloordiv": 99, "rmod": 100, "rmul": 101, "rmultipli": 102, "rpow": 103, "rsub": 104, "rsubtract": 105, "rtruediv": 106, "sub": 111, "subtract": 112, "truediv": 118, "uniqu": 119, "value_count": 120, "csv_to_opensearch": 122, "other": 122, "dataframegroupbi": [123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136], "execut": [141, 168], "pretrain": [147, 151, 168], "undeploi": [148, 168], "opensearch_to_panda": 152, "pandas_to_opensearch": 153, "sentencetransformermodel": [155, 156, 157, 158, 159, 160, 161, 162, 163], "load_training_data": 155, "make_model_config_json": 156, "read_queri": 157, "save_as_onnx": 158, "save_as_pt": 159, "set_up_accelerate_config": 160, "train_model": 162, "zip_model": 163, "constructor": [164, 170, 171], "reindex": [164, 171], "label": [164, 171], "manipul": [164, 171], "plot": [164, 171], "serial": [164, 171], "io": [164, 171], "convers": [164, 171], "util": 165, "api": 166, "refer": 166, "input": 167, "output": 167, "flat": 167, "support": 168, "pre": 169, "option": 170, "config": 170, "binari": 171}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "nbsphinx": 4, "sphinx.ext.todo": 2, "sphinx": 60}, "alltitles": {"Demo Notebook for deploying CLIPTextModel to OpenSearch": [[0, "Demo-Notebook-for-deploying-CLIPTextModel-to-OpenSearch"]], "Download notebook": [[0, "Download-notebook"], [1, "Download-notebook"], [2, "Download-notebook"], [3, "Download-notebook"], [4, "Download-notebook"], [5, "Download-notebook"]], "Step 0: Import packages and set up client": [[0, "Step-0:-Import-packages-and-set-up-client"], [2, "Step-0:-Import-packages-and-set-up-client"], [4, "Step-0:-Import-packages-and-set-up-client"]], "Step 1: Trace CLIPTextModel and export to TorchScript": [[0, "Step-1:-Trace-CLIPTextModel-and-export-to-TorchScript"]], "Step 2: Prep files for registration": [[0, "Step-2:-Prep-files-for-registration"]], "Step 3: Register model to OpenSearch": [[0, "Step-3:-Register-model-to-OpenSearch"]], "Step 4: Deploy model": [[0, "Step-4:-Deploy-model"]], "Demo Notebook for Metrics Correlation Model Testing": [[1, "Demo-Notebook-for-Metrics-Correlation-Model-Testing"]], "Introduction": [[1, "Introduction"], [5, "Introduction"]], "Step 0: Imports": [[1, "Step-0:-Imports"], [3, "Step-0:-Imports"], [7, "Step-0:-Imports"]], "Step 1: Set up clients and define helper functions": [[1, "Step-1:-Set-up-clients-and-define-helper-functions"]], "Step 2: Preparing data": [[1, "Step-2:-Preparing-data"]], "Step 3: Metrics correlation": [[1, "Step-3:-Metrics-correlation"]], "Step 4: Result visualization": [[1, "Step-4:-Result-visualization"]], "Demo Notebook for MLCommons Integration": [[2, "Demo-Notebook-for-MLCommons-Integration"]], "Step 1: Upload NLP model from local file to Opensearch cluster": [[2, "Step-1:-Upload-NLP-model-from-local-file-to-Opensearch-cluster"]], "Step 2: Load Model": [[2, "Step-2:-Load-Model"]], "Step 3: Get Task": [[2, "Step-3:-Get-Task"]], "Step 4: Get Model": [[2, "Step-4:-Get-Model"]], "Step 5: Generate Sentence Embedding": [[2, "Step-5:-Generate-Sentence-Embedding"], [4, "Step-5:-Generate-Sentence-Embedding"]], "Step 6: Unload Model": [[2, "Step-6:-Unload-Model"]], "Step 7: Delete Model": [[2, "Step-7:-Delete-Model"]], "Demo Notebook for Dataframe": [[3, "Demo-Notebook-for-Dataframe"]], "Step 1: Setup clients": [[3, "Step-1:-Setup-clients"], [7, "Step-1:-Setup-clients"]], "Comparing similarities and differences between panda dataframe vs opensearch_py_ml dataframe": [[3, "Comparing-similarities-and-differences-between-panda-dataframe-vs-opensearch_py_ml-dataframe"]], "Attributes and underlying data": [[3, "Attributes-and-underlying-data"]], "DataFrame.columns": [[3, "DataFrame.columns"], [12, "dataframe-columns"]], "DataFrame.dtypes": [[3, "DataFrame.dtypes"], [16, "dataframe-dtypes"]], "DataFrame.select_dtypes": [[3, "DataFrame.select_dtypes"], [45, "dataframe-select-dtypes"]], "DataFrame.empty": [[3, "DataFrame.empty"], [17, "dataframe-empty"]], "DataFrame.shape": [[3, "DataFrame.shape"], [46, "dataframe-shape"]], "DataFrame.index": [[3, "DataFrame.index"], [25, "dataframe-index"]], "DataFrame.values": [[3, "DataFrame.values"], [56, "dataframe-values"]], "Indexing, iteration": [[3, "Indexing,-iteration"]], "DataFrame.head": [[3, "DataFrame.head"], [21, "dataframe-head"]], "DataFrame.tail": [[3, "DataFrame.tail"], [50, "dataframe-tail"]], "DataFrame.keys": [[3, "DataFrame.keys"], [29, "dataframe-keys"]], "DataFrame.get": [[3, "DataFrame.get"], [19, "dataframe-get"]], "DataFrame.query": [[3, "DataFrame.query"], [43, "dataframe-query"]], "Boolean indexing query": [[3, "Boolean-indexing-query"]], "Function application, GroupBy & window": [[3, "Function-application,-GroupBy-&-window"]], "DataFrame.aggs": [[3, "DataFrame.aggs"]], "Computations / descriptive stats": [[3, "Computations-/-descriptive-stats"]], "DataFrame.count": [[3, "DataFrame.count"], [13, "dataframe-count"]], "DataFrame.describe": [[3, "DataFrame.describe"], [14, "dataframe-describe"]], "DataFrame.info": [[3, "DataFrame.info"], [26, "dataframe-info"]], "DataFrame.max, DataFrame.min, DataFrame.mean, DataFrame.sum": [[3, "DataFrame.max,-DataFrame.min,-DataFrame.mean,-DataFrame.sum"]], "max": [[3, "max"]], "min": [[3, "min"]], "mean": [[3, "mean"]], "sum": [[3, "sum"]], "Demo Notebook to trace Sentence Transformers model": [[4, "Demo-Notebook-to-trace-Sentence-Transformers-model"]], "Step 1: Save model in torchScript format": [[4, "Step-1:-Save-model-in-torchScript-format"]], "Step 2: Register the saved torchScript model in Opensearch": [[4, "Step-2:-Register-the-saved-torchScript-model-in-Opensearch"]], "Step 3: Save model in Onnx format": [[4, "Step-3:-Save-model-in-Onnx-format"]], "Step 4: Register the saved Onnx model in Opensearch": [[4, "Step-4:-Register-the-saved-Onnx-model-in-Opensearch"]], "Demo Notebook for Sentence Transformer Model Training, Saving and Uploading to OpenSearch": [[5, "Demo-Notebook-for-Sentence-Transformer-Model-Training,-Saving-and-Uploading-to-OpenSearch"]], "Synthetic query generation": [[5, "Synthetic-query-generation"]], "Step 1: Import packages, set up client and define helper functions": [[5, "Step-1:-Import-packages,-set-up-client-and-define-helper-functions"]], "Step 2: Import the data/passages for synthetic query generation": [[5, "Step-2:-Import-the-data/passages-for-synthetic-query-generation"]], "2.1) Load the data and convert into a pandas dataframe": [[5, "2.1)-Load-the-data-and-convert-into-a-pandas-dataframe"]], "2.2) Convert the data into a list of strings and instantiate an object of the class Synthetic_Query_Generation": [[5, "2.2)-Convert-the-data-into-a-list-of-strings-and-instantiate-an-object-of-the-class-Synthetic_Query_Generation"]], "Step 3: Generate synthetic queries": [[5, "Step-3:-Generate-synthetic-queries"]], "This is how the sample queries look like,": [[5, "This-is-how-the-sample-queries-look-like,"]], "Step 4: Read synthetic queries and train/fine-tune a hugging face sentence transformer model on synthetic data": [[5, "Step-4:-Read-synthetic-queries-and-train/fine-tune-a-hugging-face-sentence-transformer-model-on-synthetic-data"]], "Step 5: Upload the model to OpenSearch cluster": [[5, "Step-5:-Upload-the-model-to-OpenSearch-cluster"]], "Examples": [[6, "examples"], [9, "examples"], [10, "examples"], [11, "examples"], [12, "examples"], [13, "examples"], [14, "examples"], [15, "examples"], [16, "examples"], [17, "examples"], [19, "examples"], [20, "examples"], [21, "examples"], [22, "examples"], [23, "examples"], [24, "examples"], [25, "examples"], [26, "examples"], [27, "examples"], [28, "examples"], [30, "examples"], [31, "examples"], [32, "examples"], [33, "examples"], [34, "examples"], [35, "examples"], [37, "examples"], [38, "examples"], [39, "examples"], [40, "examples"], [41, "examples"], [42, "examples"], [43, "examples"], [45, "examples"], [46, "examples"], [48, "examples"], [49, "examples"], [50, "examples"], [53, "examples"], [57, "examples"], [59, "examples"], [60, "examples"], [61, "examples"], [62, "examples"], [63, "examples"], [65, "examples"], [68, "examples"], [70, "examples"], [71, "examples"], [75, "examples"], [76, "examples"], [77, "examples"], [78, "examples"], [79, "examples"], [80, "examples"], [81, "examples"], [82, "examples"], [83, "examples"], [88, "examples"], [90, "examples"], [92, "examples"], [93, "examples"], [94, "examples"], [95, "examples"], [96, "examples"], [97, "examples"], [98, "examples"], [99, "examples"], [100, "examples"], [101, "examples"], [102, "examples"], [103, "examples"], [104, "examples"], [105, "examples"], [106, "examples"], [108, "examples"], [110, "examples"], [111, "examples"], [112, "examples"], [113, "examples"], [115, "examples"], [118, "examples"], [120, "examples"], [121, "examples"], [122, "examples"], [124, "examples"], [125, "examples"], [126, "examples"], [127, "examples"], [128, "examples"], [129, "examples"], [130, "examples"], [131, "examples"], [132, "examples"], [133, "examples"], [134, "examples"], [135, "examples"], [136, "examples"], [152, "examples"], [153, "examples"]], "Demo notebooks for Data Exploration Panda like DataFrame": [[6, "demo-notebooks-for-data-exploration-panda-like-dataframe"]], "Demo notebooks for Model Training and Tracing": [[6, "demo-notebooks-for-model-training-and-tracing"]], "Demo notebooks for ML Commons plugin integration": [[6, "demo-notebooks-for-ml-commons-plugin-integration"]], "Demo Notebooks for In-house python based models": [[6, "demo-notebooks-for-in-house-python-based-models"]], "Demo Notebook for Online Retail Analysis": [[7, "Demo-Notebook-for-Online-Retail-Analysis"]], "download notebook": [[7, "download-notebook"]], "Getting Started": [[7, "Getting-Started"], [8, "getting-started"]], "Selecting and Indexing Data": [[7, "Selecting-and-Indexing-Data"]], "head and tail": [[7, "head-and-tail"]], "Selecting columns": [[7, "Selecting-columns"]], "Boolean Indexing": [[7, "Boolean-Indexing"]], "Aggregation and Descriptive Statistics": [[7, "Aggregation-and-Descriptive-Statistics"]], "Arithmetic Operations": [[7, "Arithmetic-Operations"]], "Opensearch-py-ml: DataFrames and Machine Learning backed by Opensearch": [[8, "opensearch-py-ml-dataframes-and-machine-learning-backed-by-opensearch"]], "Installing Opensearch-py-ml": [[8, "installing-opensearch-py-ml"]], "DataFrame": [[9, "dataframe"], [164, "dataframe"]], "Parameters": [[9, "parameters"], [10, "parameters"], [11, "parameters"], [15, "parameters"], [18, "parameters"], [19, "parameters"], [20, "parameters"], [21, "parameters"], [23, "parameters"], [24, "parameters"], [27, "parameters"], [28, "parameters"], [31, "parameters"], [32, "parameters"], [33, "parameters"], [34, "parameters"], [35, "parameters"], [40, "parameters"], [41, "parameters"], [42, "parameters"], [43, "parameters"], [44, "parameters"], [48, "parameters"], [49, "parameters"], [50, "parameters"], [57, "parameters"], [59, "parameters"], [60, "parameters"], [62, "parameters"], [63, "parameters"], [67, "parameters"], [68, "parameters"], [80, "parameters"], [81, "parameters"], [82, "parameters"], [83, "parameters"], [92, "parameters"], [93, "parameters"], [94, "parameters"], [95, "parameters"], [96, "parameters"], [97, "parameters"], [98, "parameters"], [99, "parameters"], [100, "parameters"], [101, "parameters"], [102, "parameters"], [103, "parameters"], [104, "parameters"], [105, "parameters"], [106, "parameters"], [111, "parameters"], [112, "parameters"], [118, "parameters"], [120, "parameters"], [122, "parameters"], [124, "parameters"], [125, "parameters"], [127, "parameters"], [128, "parameters"], [129, "parameters"], [130, "parameters"], [131, "parameters"], [132, "parameters"], [133, "parameters"], [134, "parameters"], [135, "parameters"], [136, "parameters"], [152, "parameters"], [153, "parameters"], [161, "parameters"]], "See Also": [[9, "see-also"], [10, "see-also"], [11, "see-also"], [12, "see-also"], [13, "see-also"], [14, "see-also"], [15, "see-also"], [16, "see-also"], [17, "see-also"], [18, "see-also"], [19, "see-also"], [20, "see-also"], [21, "see-also"], [23, "see-also"], [24, "see-also"], [25, "see-also"], [27, "see-also"], [28, "see-also"], [30, "see-also"], [31, "see-also"], [32, "see-also"], [33, "see-also"], [34, "see-also"], [35, "see-also"], [36, "see-also"], [37, "see-also"], [42, "see-also"], [43, "see-also"], [44, "see-also"], [47, "see-also"], [48, "see-also"], [49, "see-also"], [50, "see-also"], [51, "see-also"], [52, "see-also"], [53, "see-also"], [55, "see-also"], [56, "see-also"], [57, "see-also"], [59, "see-also"], [61, "see-also"], [64, "see-also"], [65, "see-also"], [67, "see-also"], [71, "see-also"], [73, "see-also"], [74, "see-also"], [75, "see-also"], [76, "see-also"], [77, "see-also"], [78, "see-also"], [79, "see-also"], [81, "see-also"], [85, "see-also"], [86, "see-also"], [87, "see-also"], [88, "see-also"], [94, "see-also"], [98, "see-also"], [109, "see-also"], [110, "see-also"], [113, "see-also"], [115, "see-also"], [117, "see-also"], [119, "see-also"], [120, "see-also"], [121, "see-also"], [122, "see-also"], [124, "see-also"], [125, "see-also"], [126, "see-also"], [127, "see-also"], [128, "see-also"], [129, "see-also"], [130, "see-also"], [131, "see-also"], [132, "see-also"], [133, "see-also"], [134, "see-also"], [135, "see-also"], [136, "see-also"], [152, "see-also"], [153, "see-also"]], "DataFrame.agg": [[10, "dataframe-agg"]], "Returns": [[10, "returns"], [11, "returns"], [12, "returns"], [13, "returns"], [14, "returns"], [15, "returns"], [16, "returns"], [17, "returns"], [18, "returns"], [19, "returns"], [20, "returns"], [21, "returns"], [23, "returns"], [24, "returns"], [25, "returns"], [28, "returns"], [29, "returns"], [30, "returns"], [31, "returns"], [32, "returns"], [33, "returns"], [34, "returns"], [36, "returns"], [37, "returns"], [38, "returns"], [39, "returns"], [40, "returns"], [41, "returns"], [42, "returns"], [43, "returns"], [44, "returns"], [45, "returns"], [46, "returns"], [47, "returns"], [48, "returns"], [49, "returns"], [50, "returns"], [54, "returns"], [57, "returns"], [60, "returns"], [61, "returns"], [62, "returns"], [63, "returns"], [65, "returns"], [67, "returns"], [68, "returns"], [71, "returns"], [73, "returns"], [74, "returns"], [75, "returns"], [76, "returns"], [77, "returns"], [78, "returns"], [79, "returns"], [80, "returns"], [82, "returns"], [83, "returns"], [85, "returns"], [86, "returns"], [87, "returns"], [88, "returns"], [90, "returns"], [92, "returns"], [93, "returns"], [94, "returns"], [95, "returns"], [96, "returns"], [97, "returns"], [98, "returns"], [99, "returns"], [100, "returns"], [101, "returns"], [102, "returns"], [103, "returns"], [104, "returns"], [105, "returns"], [106, "returns"], [108, "returns"], [109, "returns"], [110, "returns"], [111, "returns"], [112, "returns"], [113, "returns"], [118, "returns"], [119, "returns"], [120, "returns"], [121, "returns"], [124, "returns"], [125, "returns"], [126, "returns"], [127, "returns"], [128, "returns"], [129, "returns"], [130, "returns"], [131, "returns"], [132, "returns"], [133, "returns"], [134, "returns"], [135, "returns"], [136, "returns"], [152, "returns"], [153, "returns"], [161, "returns"]], "DataFrame.aggregate": [[11, "dataframe-aggregate"]], "DataFrame.drop": [[15, "dataframe-drop"]], "DataFrame.filter": [[18, "dataframe-filter"]], "Notes": [[18, "notes"], [22, "notes"], [26, "notes"], [46, "notes"], [59, "notes"], [67, "notes"], [70, "notes"], [108, "notes"], [122, "notes"]], "DataFrame.groupby": [[20, "dataframe-groupby"]], "DataFrame.hist": [[22, "dataframe-hist"]], "DataFrame.idxmax": [[23, "dataframe-idxmax"]], "DataFrame.idxmin": [[24, "dataframe-idxmin"]], "DataFrame.iterrows": [[27, "dataframe-iterrows"]], "Yields": [[27, "yields"]], "DataFrame.itertuples": [[28, "dataframe-itertuples"]], "DataFrame.mad": [[30, "dataframe-mad"]], "DataFrame.max": [[31, "dataframe-max"]], "DataFrame.mean": [[32, "dataframe-mean"]], "DataFrame.median": [[33, "dataframe-median"]], "DataFrame.min": [[34, "dataframe-min"]], "DataFrame.mode": [[35, "dataframe-mode"]], "DataFrame.ndim": [[36, "dataframe-ndim"]], "DataFrame.nunique": [[37, "dataframe-nunique"]], "DataFrame.os_dtypes": [[38, "dataframe-os-dtypes"]], "DataFrame.os_info": [[39, "dataframe-os-info"]], "DataFrame.os_match": [[40, "dataframe-os-match"]], "DataFrame.os_query": [[41, "dataframe-os-query"]], "DataFrame.quantile": [[42, "dataframe-quantile"]], "DataFrame.sample": [[44, "dataframe-sample"]], "DataFrame.size": [[47, "dataframe-size"]], "DataFrame.std": [[48, "dataframe-std"]], "DataFrame.sum": [[49, "dataframe-sum"]], "DataFrame.to_csv": [[51, "dataframe-to-csv"]], "DataFrame.to_html": [[52, "dataframe-to-html"]], "DataFrame.to_numpy": [[53, "dataframe-to-numpy"]], "DataFrame.to_pandas": [[54, "dataframe-to-pandas"]], "DataFrame.to_string": [[55, "dataframe-to-string"]], "DataFrame.var": [[57, "dataframe-var"]], "opensearch_py_ml.Index": [[58, "opensearch-py-ml-index"]], "Series": [[59, "series"], [171, "series"]], "Series.add": [[60, "series-add"]], "Series.describe": [[61, "series-describe"]], "Series.div": [[62, "series-div"]], "Series.divide": [[63, "series-divide"]], "Series.dtype": [[64, "series-dtype"]], "Series.dtypes": [[65, "series-dtypes"]], "Series.empty": [[66, "series-empty"]], "Series.filter": [[67, "series-filter"]], "Series.floordiv": [[68, "series-floordiv"]], "Series.head": [[69, "series-head"]], "Series.hist": [[70, "series-hist"]], "Series.index": [[71, "series-index"]], "Series.isin": [[72, "series-isin"]], "Series.isna": [[73, "series-isna"]], "Series.isnull": [[74, "series-isnull"]], "Series.mad": [[75, "series-mad"]], "Series.max": [[76, "series-max"]], "Series.mean": [[77, "series-mean"]], "Series.median": [[78, "series-median"]], "Series.min": [[79, "series-min"]], "Series.mod": [[80, "series-mod"]], "Series.mode": [[81, "series-mode"]], "Series.mul": [[82, "series-mul"]], "Series.multiply": [[83, "series-multiply"]], "Series.name": [[84, "series-name"]], "Series.ndim": [[85, "series-ndim"]], "Series.notna": [[86, "series-notna"]], "Series.notnull": [[87, "series-notnull"]], "Series.nunique": [[88, "series-nunique"]], "Series.os_dtype": [[89, "series-os-dtype"]], "Series.os_dtypes": [[90, "series-os-dtypes"]], "Series.os_info": [[91, "series-os-info"]], "Series.os_match": [[92, "series-os-match"]], "Series.pow": [[93, "series-pow"]], "Series.quantile": [[94, "series-quantile"]], "Series.radd": [[95, "series-radd"]], "Series.rdiv": [[96, "series-rdiv"]], "Series.rdivide": [[97, "series-rdivide"]], "Series.rename": [[98, "series-rename"]], "Series.rfloordiv": [[99, "series-rfloordiv"]], "Series.rmod": [[100, "series-rmod"]], "Series.rmul": [[101, "series-rmul"]], "Series.rmultiply": [[102, "series-rmultiply"]], "Series.rpow": [[103, "series-rpow"]], "Series.rsub": [[104, "series-rsub"]], "Series.rsubtract": [[105, "series-rsubtract"]], "Series.rtruediv": [[106, "series-rtruediv"]], "Series.sample": [[107, "series-sample"]], "Series.shape": [[108, "series-shape"]], "Series.size": [[109, "series-size"]], "Series.std": [[110, "series-std"]], "Series.sub": [[111, "series-sub"]], "Series.subtract": [[112, "series-subtract"]], "Series.sum": [[113, "series-sum"]], "Series.tail": [[114, "series-tail"]], "Series.to_numpy": [[115, "series-to-numpy"]], "Series.to_pandas": [[116, "series-to-pandas"]], "Series.to_string": [[117, "series-to-string"]], "Series.truediv": [[118, "series-truediv"]], "Series.unique": [[119, "series-unique"]], "Series.value_counts": [[120, "series-value-counts"]], "Series.var": [[121, "series-var"]], "csv_to_opensearch": [[122, "csv-to-opensearch"]], "Other Parameters": [[122, "other-parameters"]], "groupby.DataFrameGroupBy": [[123, "groupby-dataframegroupby"]], "groupby.DataFrameGroupBy.agg": [[124, "groupby-dataframegroupby-agg"]], "groupby.DataFrameGroupBy.aggregate": [[125, "groupby-dataframegroupby-aggregate"]], "groupby.DataFrameGroupBy.count": [[126, "groupby-dataframegroupby-count"]], "groupby.DataFrameGroupBy.mad": [[127, "groupby-dataframegroupby-mad"]], "groupby.DataFrameGroupBy.max": [[128, "groupby-dataframegroupby-max"]], "groupby.DataFrameGroupBy.mean": [[129, "groupby-dataframegroupby-mean"]], "groupby.DataFrameGroupBy.median": [[130, "groupby-dataframegroupby-median"]], "groupby.DataFrameGroupBy.min": [[131, "groupby-dataframegroupby-min"]], "groupby.DataFrameGroupBy.nunique": [[132, "groupby-dataframegroupby-nunique"]], "groupby.DataFrameGroupBy.quantile": [[133, "groupby-dataframegroupby-quantile"]], "groupby.DataFrameGroupBy.std": [[134, "groupby-dataframegroupby-std"]], "groupby.DataFrameGroupBy.sum": [[135, "groupby-dataframegroupby-sum"]], "groupby.DataFrameGroupBy.var": [[136, "groupby-dataframegroupby-var"]], "groupby.GroupBy": [[137, "groupby-groupby"]], "Delete Model": [[138, "delete-model"], [168, "delete-model"]], "Delete Task": [[139, "delete-task"], [168, "delete-task"]], "Deploy Model": [[140, "deploy-model"], [168, "deploy-model"]], "Execute": [[141, "execute"], [168, "execute"]], "Generate Embedding": [[142, "generate-embedding"], [168, "generate-embedding"]], "Get Model Info": [[143, "get-model-info"], [168, "get-model-info"]], "Get Task Info": [[144, "get-task-info"], [168, "get-task-info"]], "Load Model": [[145, "load-model"], [168, "load-model"]], "Register Model": [[146, "register-model"], [168, "register-model"]], "Register Pretrained Model": [[147, "register-pretrained-model"], [168, "register-pretrained-model"]], "Undeploy Model": [[148, "undeploy-model"], [168, "undeploy-model"]], "Unload Model": [[149, "unload-model"], [168, "unload-model"]], "Upload Model": [[150, "upload-model"], [168, "upload-model"]], "Upload Pretrained Model": [[151, "upload-pretrained-model"], [168, "upload-pretrained-model"]], "opensearch_to_pandas": [[152, "opensearch-to-pandas"]], "pandas_to_opensearch": [[153, "pandas-to-opensearch"]], "Sentence Transformer": [[154, "sentence-transformer"], [170, "sentence-transformer"]], "SentenceTransformerModel.load_training_data": [[155, "sentencetransformermodel-load-training-data"]], "SentenceTransformerModel.make_model_config_json": [[156, "sentencetransformermodel-make-model-config-json"]], "SentenceTransformerModel.read_queries": [[157, "sentencetransformermodel-read-queries"]], "SentenceTransformerModel.save_as_onnx": [[158, "sentencetransformermodel-save-as-onnx"]], "SentenceTransformerModel.save_as_pt": [[159, "sentencetransformermodel-save-as-pt"]], "SentenceTransformerModel.set_up_accelerate_config": [[160, "sentencetransformermodel-set-up-accelerate-config"]], "SentenceTransformerModel.train": [[161, "sentencetransformermodel-train"]], "SentenceTransformerModel.train_model": [[162, "sentencetransformermodel-train-model"]], "SentenceTransformerModel.zip_model": [[163, "sentencetransformermodel-zip-model"]], "Constructor": [[164, "constructor"], [170, "constructor"], [171, "constructor"]], "Attributes and Underlying Data": [[164, "attributes-and-underlying-data"], [171, "attributes-and-underlying-data"]], "Indexing, Iteration": [[164, "indexing-iteration"], [171, "indexing-iteration"]], "Function Application, GroupBy & Window": [[164, "function-application-groupby-window"]], "Computations / Descriptive Stats": [[164, "computations-descriptive-stats"], [171, "computations-descriptive-stats"]], "Reindexing / Selection / Label Manipulation": [[164, "reindexing-selection-label-manipulation"], [171, "reindexing-selection-label-manipulation"]], "Plotting": [[164, "plotting"], [171, "plotting"]], "Opensearch Functions": [[164, "opensearch-functions"], [171, "opensearch-functions"]], "Serialization / IO / Conversion": [[164, "serialization-io-conversion"], [171, "serialization-io-conversion"]], "General Utility Functions": [[165, "general-utility-functions"]], "Pandas and Opensearch": [[165, "pandas-and-opensearch"]], "API Reference": [[166, "api-reference"]], "Input/Output": [[167, "input-output"]], "Flat File": [[167, "flat-file"]], "MLCommons Support": [[168, "mlcommons-support"]], "Pre-trained models": [[169, "pre-trained-models"]], "Train Model": [[170, "train-model"]], "(Optional) Step by Step Train Model": [[170, "optional-step-by-step-train-model"]], "Export Model": [[170, "export-model"]], "Config Model": [[170, "config-model"]], "Binary Operator Functions": [[171, "binary-operator-functions"]]}, "indexentries": {"module": [[8, "module-opensearch_py_ml"]], "opensearch_py_ml": [[8, "module-opensearch_py_ml"]], "dataframe (class in opensearch_py_ml)": [[9, "opensearch_py_ml.DataFrame"]], "agg() (opensearch_py_ml.dataframe method)": [[10, "opensearch_py_ml.DataFrame.agg"]], "aggregate() (opensearch_py_ml.dataframe method)": [[11, "opensearch_py_ml.DataFrame.aggregate"]], "columns (opensearch_py_ml.dataframe attribute)": [[12, "opensearch_py_ml.DataFrame.columns"]], "count() (opensearch_py_ml.dataframe method)": [[13, "opensearch_py_ml.DataFrame.count"]], "describe() (opensearch_py_ml.dataframe method)": [[14, "opensearch_py_ml.DataFrame.describe"]], "drop() (opensearch_py_ml.dataframe method)": [[15, "opensearch_py_ml.DataFrame.drop"]], "dtypes (opensearch_py_ml.dataframe attribute)": [[16, "opensearch_py_ml.DataFrame.dtypes"]], "empty (opensearch_py_ml.dataframe attribute)": [[17, "opensearch_py_ml.DataFrame.empty"]], "filter() (opensearch_py_ml.dataframe method)": [[18, "opensearch_py_ml.DataFrame.filter"]], "get() (opensearch_py_ml.dataframe method)": [[19, "opensearch_py_ml.DataFrame.get"]], "groupby() (opensearch_py_ml.dataframe method)": [[20, "opensearch_py_ml.DataFrame.groupby"]], "head() (opensearch_py_ml.dataframe method)": [[21, "opensearch_py_ml.DataFrame.head"]], "hist() (opensearch_py_ml.dataframe method)": [[22, "opensearch_py_ml.DataFrame.hist"]], "idxmax() (opensearch_py_ml.dataframe method)": [[23, "opensearch_py_ml.DataFrame.idxmax"]], "idxmin() (opensearch_py_ml.dataframe method)": [[24, "opensearch_py_ml.DataFrame.idxmin"]], "index (opensearch_py_ml.dataframe attribute)": [[25, "opensearch_py_ml.DataFrame.index"]], "info() (opensearch_py_ml.dataframe method)": [[26, "opensearch_py_ml.DataFrame.info"]], "iterrows() (opensearch_py_ml.dataframe method)": [[27, "opensearch_py_ml.DataFrame.iterrows"]], "itertuples() (opensearch_py_ml.dataframe method)": [[28, "opensearch_py_ml.DataFrame.itertuples"]], "keys() (opensearch_py_ml.dataframe method)": [[29, "opensearch_py_ml.DataFrame.keys"]], "mad() (opensearch_py_ml.dataframe method)": [[30, "opensearch_py_ml.DataFrame.mad"]], "max() (opensearch_py_ml.dataframe method)": [[31, "opensearch_py_ml.DataFrame.max"]], "mean() (opensearch_py_ml.dataframe method)": [[32, "opensearch_py_ml.DataFrame.mean"]], "median() (opensearch_py_ml.dataframe method)": [[33, "opensearch_py_ml.DataFrame.median"]], "min() (opensearch_py_ml.dataframe method)": [[34, "opensearch_py_ml.DataFrame.min"]], "mode() (opensearch_py_ml.dataframe method)": [[35, "opensearch_py_ml.DataFrame.mode"]], "ndim (opensearch_py_ml.dataframe attribute)": [[36, "opensearch_py_ml.DataFrame.ndim"]], "nunique() (opensearch_py_ml.dataframe method)": [[37, "opensearch_py_ml.DataFrame.nunique"]], "os_dtypes (opensearch_py_ml.dataframe attribute)": [[38, "opensearch_py_ml.DataFrame.os_dtypes"]], "os_info() (opensearch_py_ml.dataframe method)": [[39, "opensearch_py_ml.DataFrame.os_info"]], "os_match() (opensearch_py_ml.dataframe method)": [[40, "opensearch_py_ml.DataFrame.os_match"]], "os_query() (opensearch_py_ml.dataframe method)": [[41, "opensearch_py_ml.DataFrame.os_query"]], "quantile() (opensearch_py_ml.dataframe method)": [[42, "opensearch_py_ml.DataFrame.quantile"]], "query() (opensearch_py_ml.dataframe method)": [[43, "opensearch_py_ml.DataFrame.query"]], "sample() (opensearch_py_ml.dataframe method)": [[44, "opensearch_py_ml.DataFrame.sample"]], "select_dtypes() (opensearch_py_ml.dataframe method)": [[45, "opensearch_py_ml.DataFrame.select_dtypes"]], "shape (opensearch_py_ml.dataframe attribute)": [[46, "opensearch_py_ml.DataFrame.shape"]], "size (opensearch_py_ml.dataframe attribute)": [[47, "opensearch_py_ml.DataFrame.size"]], "std() (opensearch_py_ml.dataframe method)": [[48, "opensearch_py_ml.DataFrame.std"]], "sum() (opensearch_py_ml.dataframe method)": [[49, "opensearch_py_ml.DataFrame.sum"]], "tail() (opensearch_py_ml.dataframe method)": [[50, "opensearch_py_ml.DataFrame.tail"]], "to_csv() (opensearch_py_ml.dataframe method)": [[51, "opensearch_py_ml.DataFrame.to_csv"]], "to_html() (opensearch_py_ml.dataframe method)": [[52, "opensearch_py_ml.DataFrame.to_html"]], "to_numpy() (opensearch_py_ml.dataframe method)": [[53, "opensearch_py_ml.DataFrame.to_numpy"]], "to_pandas() (opensearch_py_ml.dataframe method)": [[54, "opensearch_py_ml.DataFrame.to_pandas"]], "to_string() (opensearch_py_ml.dataframe method)": [[55, "opensearch_py_ml.DataFrame.to_string"]], "values (opensearch_py_ml.dataframe attribute)": [[56, "opensearch_py_ml.DataFrame.values"]], "var() (opensearch_py_ml.dataframe method)": [[57, "opensearch_py_ml.DataFrame.var"]], "index (class in opensearch_py_ml)": [[58, "opensearch_py_ml.Index"]], "series (class in opensearch_py_ml)": [[59, "opensearch_py_ml.Series"]], "add() (opensearch_py_ml.series method)": [[60, "opensearch_py_ml.Series.add"]], "describe() (opensearch_py_ml.series method)": [[61, "opensearch_py_ml.Series.describe"]], "div() (opensearch_py_ml.series method)": [[62, "opensearch_py_ml.Series.div"]], "divide() (opensearch_py_ml.series method)": [[63, "opensearch_py_ml.Series.divide"]], "dtype (opensearch_py_ml.series attribute)": [[64, "opensearch_py_ml.Series.dtype"]], "dtypes (opensearch_py_ml.series attribute)": [[65, "opensearch_py_ml.Series.dtypes"]], "empty (opensearch_py_ml.series attribute)": [[66, "opensearch_py_ml.Series.empty"]], "filter() (opensearch_py_ml.series method)": [[67, "opensearch_py_ml.Series.filter"]], "floordiv() (opensearch_py_ml.series method)": [[68, "opensearch_py_ml.Series.floordiv"]], "head() (opensearch_py_ml.series method)": [[69, "opensearch_py_ml.Series.head"]], "hist() (opensearch_py_ml.series method)": [[70, "opensearch_py_ml.Series.hist"]], "index (opensearch_py_ml.series attribute)": [[71, "opensearch_py_ml.Series.index"]], "isin() (opensearch_py_ml.series method)": [[72, "opensearch_py_ml.Series.isin"]], "isna() (opensearch_py_ml.series method)": [[73, "opensearch_py_ml.Series.isna"]], "isnull() (opensearch_py_ml.series method)": [[74, "opensearch_py_ml.Series.isnull"]], "mad() (opensearch_py_ml.series method)": [[75, "opensearch_py_ml.Series.mad"]], "max() (opensearch_py_ml.series method)": [[76, "opensearch_py_ml.Series.max"]], "mean() (opensearch_py_ml.series method)": [[77, "opensearch_py_ml.Series.mean"]], "median() (opensearch_py_ml.series method)": [[78, "opensearch_py_ml.Series.median"]], "min() (opensearch_py_ml.series method)": [[79, "opensearch_py_ml.Series.min"]], "mod() (opensearch_py_ml.series method)": [[80, "opensearch_py_ml.Series.mod"]], "mode() (opensearch_py_ml.series method)": [[81, "opensearch_py_ml.Series.mode"]], "mul() (opensearch_py_ml.series method)": [[82, "opensearch_py_ml.Series.mul"]], "multiply() (opensearch_py_ml.series method)": [[83, "opensearch_py_ml.Series.multiply"]], "name (opensearch_py_ml.series attribute)": [[84, "opensearch_py_ml.Series.name"]], "ndim (opensearch_py_ml.series attribute)": [[85, "opensearch_py_ml.Series.ndim"]], "notna() (opensearch_py_ml.series method)": [[86, "opensearch_py_ml.Series.notna"]], "notnull() (opensearch_py_ml.series method)": [[87, "opensearch_py_ml.Series.notnull"]], "nunique() (opensearch_py_ml.series method)": [[88, "opensearch_py_ml.Series.nunique"]], "os_dtype (opensearch_py_ml.series attribute)": [[89, "opensearch_py_ml.Series.os_dtype"]], "os_dtypes (opensearch_py_ml.series attribute)": [[90, "opensearch_py_ml.Series.os_dtypes"]], "os_info() (opensearch_py_ml.series method)": [[91, "opensearch_py_ml.Series.os_info"]], "os_match() (opensearch_py_ml.series method)": [[92, "opensearch_py_ml.Series.os_match"]], "pow() (opensearch_py_ml.series method)": [[93, "opensearch_py_ml.Series.pow"]], "quantile() (opensearch_py_ml.series method)": [[94, "opensearch_py_ml.Series.quantile"]], "radd() (opensearch_py_ml.series method)": [[95, "opensearch_py_ml.Series.radd"]], "rdiv() (opensearch_py_ml.series method)": [[96, "opensearch_py_ml.Series.rdiv"]], "rdivide() (opensearch_py_ml.series method)": [[97, "opensearch_py_ml.Series.rdivide"]], "rename() (opensearch_py_ml.series method)": [[98, "opensearch_py_ml.Series.rename"]], "rfloordiv() (opensearch_py_ml.series method)": [[99, "opensearch_py_ml.Series.rfloordiv"]], "rmod() (opensearch_py_ml.series method)": [[100, "opensearch_py_ml.Series.rmod"]], "rmul() (opensearch_py_ml.series method)": [[101, "opensearch_py_ml.Series.rmul"]], "rmultiply() (opensearch_py_ml.series method)": [[102, "opensearch_py_ml.Series.rmultiply"]], "rpow() (opensearch_py_ml.series method)": [[103, "opensearch_py_ml.Series.rpow"]], "rsub() (opensearch_py_ml.series method)": [[104, "opensearch_py_ml.Series.rsub"]], "rsubtract() (opensearch_py_ml.series method)": [[105, "opensearch_py_ml.Series.rsubtract"]], "rtruediv() (opensearch_py_ml.series method)": [[106, "opensearch_py_ml.Series.rtruediv"]], "sample() (opensearch_py_ml.series method)": [[107, "opensearch_py_ml.Series.sample"]], "shape (opensearch_py_ml.series attribute)": [[108, "opensearch_py_ml.Series.shape"]], "size (opensearch_py_ml.series attribute)": [[109, "opensearch_py_ml.Series.size"]], "std() (opensearch_py_ml.series method)": [[110, "opensearch_py_ml.Series.std"]], "sub() (opensearch_py_ml.series method)": [[111, "opensearch_py_ml.Series.sub"]], "subtract() (opensearch_py_ml.series method)": [[112, "opensearch_py_ml.Series.subtract"]], "sum() (opensearch_py_ml.series method)": [[113, "opensearch_py_ml.Series.sum"]], "tail() (opensearch_py_ml.series method)": [[114, "opensearch_py_ml.Series.tail"]], "to_numpy() (opensearch_py_ml.series method)": [[115, "opensearch_py_ml.Series.to_numpy"]], "to_pandas() (opensearch_py_ml.series method)": [[116, "opensearch_py_ml.Series.to_pandas"]], "to_string() (opensearch_py_ml.series method)": [[117, "opensearch_py_ml.Series.to_string"]], "truediv() (opensearch_py_ml.series method)": [[118, "opensearch_py_ml.Series.truediv"]], "unique() (opensearch_py_ml.series method)": [[119, "opensearch_py_ml.Series.unique"]], "value_counts() (opensearch_py_ml.series method)": [[120, "opensearch_py_ml.Series.value_counts"]], "var() (opensearch_py_ml.series method)": [[121, "opensearch_py_ml.Series.var"]], "csv_to_opensearch() (in module opensearch_py_ml.etl)": [[122, "opensearch_py_ml.etl.csv_to_opensearch"]], "dataframegroupby (class in opensearch_py_ml.groupby)": [[123, "opensearch_py_ml.groupby.DataFrameGroupBy"]], "agg() (opensearch_py_ml.groupby.dataframegroupby method)": [[124, "opensearch_py_ml.groupby.DataFrameGroupBy.agg"]], "aggregate() (opensearch_py_ml.groupby.dataframegroupby method)": [[125, "opensearch_py_ml.groupby.DataFrameGroupBy.aggregate"]], "count() (opensearch_py_ml.groupby.dataframegroupby method)": [[126, "opensearch_py_ml.groupby.DataFrameGroupBy.count"]], "mad() (opensearch_py_ml.groupby.dataframegroupby method)": [[127, "opensearch_py_ml.groupby.DataFrameGroupBy.mad"]], "max() (opensearch_py_ml.groupby.dataframegroupby method)": [[128, "opensearch_py_ml.groupby.DataFrameGroupBy.max"]], "mean() (opensearch_py_ml.groupby.dataframegroupby method)": [[129, "opensearch_py_ml.groupby.DataFrameGroupBy.mean"]], "median() (opensearch_py_ml.groupby.dataframegroupby method)": [[130, "opensearch_py_ml.groupby.DataFrameGroupBy.median"]], "min() (opensearch_py_ml.groupby.dataframegroupby method)": [[131, "opensearch_py_ml.groupby.DataFrameGroupBy.min"]], "nunique() (opensearch_py_ml.groupby.dataframegroupby method)": [[132, "opensearch_py_ml.groupby.DataFrameGroupBy.nunique"]], "quantile() (opensearch_py_ml.groupby.dataframegroupby method)": [[133, "opensearch_py_ml.groupby.DataFrameGroupBy.quantile"]], "std() (opensearch_py_ml.groupby.dataframegroupby method)": [[134, "opensearch_py_ml.groupby.DataFrameGroupBy.std"]], "sum() (opensearch_py_ml.groupby.dataframegroupby method)": [[135, "opensearch_py_ml.groupby.DataFrameGroupBy.sum"]], "var() (opensearch_py_ml.groupby.dataframegroupby method)": [[136, "opensearch_py_ml.groupby.DataFrameGroupBy.var"]], "delete_model() (in module opensearch_py_ml.ml_commons.mlcommonclient)": [[138, "opensearch_py_ml.ml_commons.MLCommonClient.delete_model"]], "delete_task() (in module opensearch_py_ml.ml_commons.mlcommonclient)": [[139, "opensearch_py_ml.ml_commons.MLCommonClient.delete_task"]], "deploy_model() (in module opensearch_py_ml.ml_commons.mlcommonclient)": [[140, "opensearch_py_ml.ml_commons.MLCommonClient.deploy_model"]], "execute() (in module opensearch_py_ml.ml_commons.mlcommonclient)": [[141, "opensearch_py_ml.ml_commons.MLCommonClient.execute"]], "generate_embedding() (in module opensearch_py_ml.ml_commons.mlcommonclient)": [[142, "opensearch_py_ml.ml_commons.MLCommonClient.generate_embedding"]], "get_model_info() (in module opensearch_py_ml.ml_commons.mlcommonclient)": [[143, "opensearch_py_ml.ml_commons.MLCommonClient.get_model_info"]], "get_task_info() (in module opensearch_py_ml.ml_commons.mlcommonclient)": [[144, "opensearch_py_ml.ml_commons.MLCommonClient.get_task_info"]], "load_model() (in module opensearch_py_ml.ml_commons.mlcommonclient)": [[145, "opensearch_py_ml.ml_commons.MLCommonClient.load_model"]], "register_model() (in module opensearch_py_ml.ml_commons.mlcommonclient)": [[146, "opensearch_py_ml.ml_commons.MLCommonClient.register_model"]], "register_pretrained_model() (in module opensearch_py_ml.ml_commons.mlcommonclient)": [[147, "opensearch_py_ml.ml_commons.MLCommonClient.register_pretrained_model"]], "undeploy_model() (in module opensearch_py_ml.ml_commons.mlcommonclient)": [[148, "opensearch_py_ml.ml_commons.MLCommonClient.undeploy_model"]], "unload_model() (in module opensearch_py_ml.ml_commons.mlcommonclient)": [[149, "opensearch_py_ml.ml_commons.MLCommonClient.unload_model"]], "upload_model() (in module opensearch_py_ml.ml_commons.mlcommonclient)": [[150, "opensearch_py_ml.ml_commons.MLCommonClient.upload_model"]], "upload_pretrained_model() (in module opensearch_py_ml.ml_commons.mlcommonclient)": [[151, "opensearch_py_ml.ml_commons.MLCommonClient.upload_pretrained_model"]], "opensearch_to_pandas() (opensearch_py_ml.etl method)": [[152, "opensearch_py_ml.etl.opensearch_to_pandas"]], "pandas_to_opensearch() (opensearch_py_ml.etl method)": [[153, "opensearch_py_ml.etl.pandas_to_opensearch"]], "__init__() (in module opensearch_py_ml.ml_models.sentencetransformermodel)": [[154, "opensearch_py_ml.ml_models.SentenceTransformerModel.__init__"]], "load_training_data() (in module opensearch_py_ml.ml_models.sentencetransformermodel)": [[155, "opensearch_py_ml.ml_models.SentenceTransformerModel.load_training_data"]], "make_model_config_json() (in module opensearch_py_ml.ml_models.sentencetransformermodel)": [[156, "opensearch_py_ml.ml_models.SentenceTransformerModel.make_model_config_json"]], "read_queries() (in module opensearch_py_ml.ml_models.sentencetransformermodel)": [[157, "opensearch_py_ml.ml_models.SentenceTransformerModel.read_queries"]], "save_as_onnx() (in module opensearch_py_ml.ml_models.sentencetransformermodel)": [[158, "opensearch_py_ml.ml_models.SentenceTransformerModel.save_as_onnx"]], "save_as_pt() (in module opensearch_py_ml.ml_models.sentencetransformermodel)": [[159, "opensearch_py_ml.ml_models.SentenceTransformerModel.save_as_pt"]], "set_up_accelerate_config() (in module opensearch_py_ml.ml_models.sentencetransformermodel)": [[160, "opensearch_py_ml.ml_models.SentenceTransformerModel.set_up_accelerate_config"]], "train() (in module opensearch_py_ml.ml_models.sentencetransformermodel)": [[161, "opensearch_py_ml.ml_models.SentenceTransformerModel.train"]], "train_model() (in module opensearch_py_ml.ml_models.sentencetransformermodel)": [[162, "opensearch_py_ml.ml_models.SentenceTransformerModel.train_model"]], "zip_model() (in module opensearch_py_ml.ml_models.sentencetransformermodel)": [[163, "opensearch_py_ml.ml_models.SentenceTransformerModel.zip_model"]]}})